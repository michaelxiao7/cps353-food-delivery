{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport { View } from 'react-native';\nlet Screens;\n\ntry {\n  Screens = require('react-native-screens');\n} catch (e) {// Ignore\n}\n\nexport const MaybeScreenContainer = _ref => {\n  let {\n    enabled,\n    ...rest\n  } = _ref;\n\n  if (Screens != null) {\n    return /*#__PURE__*/React.createElement(Screens.ScreenContainer, _extends({\n      enabled: enabled\n    }, rest));\n  }\n\n  return /*#__PURE__*/React.createElement(View, rest);\n};\nexport const MaybeScreen = _ref2 => {\n  let {\n    enabled,\n    active,\n    ...rest\n  } = _ref2;\n\n  if (Screens != null) {\n    return /*#__PURE__*/React.createElement(Screens.Screen, _extends({\n      enabled: enabled,\n      activityState: active\n    }, rest));\n  }\n\n  return /*#__PURE__*/React.createElement(View, rest);\n};","map":{"version":3,"sources":["Screens.tsx"],"names":["Screens","require","MaybeScreenContainer","rest","enabled","MaybeScreen","active"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,IAAA,QAAA,cAAA;AAEA,IAAA,OAAA;;AAEA,IAAI;AACFA,EAAAA,OAAO,GAAGC,OAAO,CAAjBD,sBAAiB,CAAjBA;AADF,CAAA,CAEE,OAAA,CAAA,EAAU,CACV;AACD;;AAED,OAAO,MAAME,oBAAoB,GAAG,QAM9B;AAAA,MAN+B;AAAA,IAAA,OAAA;AAEnC,OAAGC;AAFgC,GAM/B;;AACJ,MAAIH,OAAO,IAAX,IAAA,EAAqB;AACnB,WAAA,aAAO,KAAA,CAAA,aAAA,CAAC,OAAD,CAAA,eAAA,EAAA,QAAA,CAAA;AAAyB,MAAA,OAAO,EAAEI;AAAlC,KAAA,EAAP,IAAO,CAAA,CAAP;AACD;;AAED,SAAA,aAAO,KAAA,CAAA,aAAA,CAAA,IAAA,EAAP,IAAO,CAAP;AAXK,CAAA;AAcP,OAAO,MAAMC,WAAW,GAAG,SAQrB;AAAA,MARsB;AAAA,IAAA,OAAA;AAAA,IAAA,MAAA;AAG1B,OAAGF;AAHuB,GAQtB;;AACJ,MAAIH,OAAO,IAAX,IAAA,EAAqB;AACnB,WAAA,aACE,KAAA,CAAA,aAAA,CAAC,OAAD,CAAA,MAAA,EAAA,QAAA,CAAA;AAAgB,MAAA,OAAO,EAAvB,OAAA;AAAkC,MAAA,aAAa,EAAEM;AAAjD,KAAA,EADF,IACE,CAAA,CADF;AAGD;;AAED,SAAA,aAAO,KAAA,CAAA,aAAA,CAAA,IAAA,EAAP,IAAO,CAAP;AAfK,CAAA","sourcesContent":["import * as React from 'react';\nimport { Animated, View, ViewProps } from 'react-native';\n\nlet Screens: typeof import('react-native-screens') | undefined;\n\ntry {\n  Screens = require('react-native-screens');\n} catch (e) {\n  // Ignore\n}\n\nexport const MaybeScreenContainer = ({\n  enabled,\n  ...rest\n}: ViewProps & {\n  enabled: boolean;\n  children: React.ReactNode;\n}) => {\n  if (Screens != null) {\n    return <Screens.ScreenContainer enabled={enabled} {...rest} />;\n  }\n\n  return <View {...rest} />;\n};\n\nexport const MaybeScreen = ({\n  enabled,\n  active,\n  ...rest\n}: ViewProps & {\n  enabled: boolean;\n  active: 0 | 1 | Animated.AnimatedInterpolation;\n  children: React.ReactNode;\n}) => {\n  if (Screens != null) {\n    return (\n      <Screens.Screen enabled={enabled} activityState={active} {...rest} />\n    );\n  }\n\n  return <View {...rest} />;\n};\n"]},"metadata":{},"sourceType":"module"}