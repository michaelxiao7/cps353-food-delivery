{"ast":null,"code":"import { getHeaderTitle, HeaderBackContext, HeaderHeightContext, HeaderShownContext } from '@react-navigation/elements';\nimport { useTheme } from '@react-navigation/native';\nimport * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport ModalPresentationContext from '../../utils/ModalPresentationContext';\nimport useKeyboardManager from '../../utils/useKeyboardManager';\nimport Card from './Card';\nconst EPSILON = 0.1;\n\nfunction CardContainer(_ref) {\n  let {\n    interpolationIndex,\n    index,\n    active,\n    closing,\n    gesture,\n    focused,\n    modal,\n    getPreviousScene,\n    getFocusedRoute,\n    headerDarkContent,\n    hasAbsoluteFloatHeader,\n    headerHeight,\n    onHeaderHeightChange,\n    isParentHeaderShown,\n    isNextScreenTransparent,\n    detachCurrentScreen,\n    layout,\n    onCloseRoute,\n    onOpenRoute,\n    onGestureCancel,\n    onGestureEnd,\n    onGestureStart,\n    onTransitionEnd,\n    onTransitionStart,\n    renderHeader,\n    renderScene,\n    safeAreaInsetBottom,\n    safeAreaInsetLeft,\n    safeAreaInsetRight,\n    safeAreaInsetTop,\n    scene\n  } = _ref;\n  const parentHeaderHeight = React.useContext(HeaderHeightContext);\n  const {\n    onPageChangeStart,\n    onPageChangeCancel,\n    onPageChangeConfirm\n  } = useKeyboardManager(React.useCallback(() => {\n    const {\n      options,\n      navigation\n    } = scene.descriptor;\n    return navigation.isFocused() && options.keyboardHandlingEnabled !== false;\n  }, [scene.descriptor]));\n\n  const handleOpen = () => {\n    const {\n      route\n    } = scene.descriptor;\n    onTransitionEnd({\n      route\n    }, false);\n    onOpenRoute({\n      route\n    });\n  };\n\n  const handleClose = () => {\n    const {\n      route\n    } = scene.descriptor;\n    onTransitionEnd({\n      route\n    }, true);\n    onCloseRoute({\n      route\n    });\n  };\n\n  const handleGestureBegin = () => {\n    const {\n      route\n    } = scene.descriptor;\n    onPageChangeStart();\n    onGestureStart({\n      route\n    });\n  };\n\n  const handleGestureCanceled = () => {\n    const {\n      route\n    } = scene.descriptor;\n    onPageChangeCancel();\n    onGestureCancel({\n      route\n    });\n  };\n\n  const handleGestureEnd = () => {\n    const {\n      route\n    } = scene.descriptor;\n    onGestureEnd({\n      route\n    });\n  };\n\n  const handleTransition = _ref2 => {\n    let {\n      closing,\n      gesture\n    } = _ref2;\n    const {\n      route\n    } = scene.descriptor;\n\n    if (!gesture) {\n      onPageChangeConfirm === null || onPageChangeConfirm === void 0 ? void 0 : onPageChangeConfirm(true);\n    } else if (active && closing) {\n      onPageChangeConfirm === null || onPageChangeConfirm === void 0 ? void 0 : onPageChangeConfirm(false);\n    } else {\n      onPageChangeCancel === null || onPageChangeCancel === void 0 ? void 0 : onPageChangeCancel();\n    }\n\n    onTransitionStart === null || onTransitionStart === void 0 ? void 0 : onTransitionStart({\n      route\n    }, closing);\n  };\n\n  const insets = {\n    top: safeAreaInsetTop,\n    right: safeAreaInsetRight,\n    bottom: safeAreaInsetBottom,\n    left: safeAreaInsetLeft\n  };\n  const {\n    colors\n  } = useTheme();\n  const [pointerEvents, setPointerEvents] = React.useState('box-none');\n  React.useEffect(() => {\n    var _scene$progress$next, _scene$progress$next$;\n\n    const listener = (_scene$progress$next = scene.progress.next) === null || _scene$progress$next === void 0 ? void 0 : (_scene$progress$next$ = _scene$progress$next.addListener) === null || _scene$progress$next$ === void 0 ? void 0 : _scene$progress$next$.call(_scene$progress$next, _ref3 => {\n      let {\n        value\n      } = _ref3;\n      setPointerEvents(value <= EPSILON ? 'box-none' : 'none');\n    });\n    return () => {\n      if (listener) {\n        var _scene$progress$next2, _scene$progress$next3;\n\n        (_scene$progress$next2 = scene.progress.next) === null || _scene$progress$next2 === void 0 ? void 0 : (_scene$progress$next3 = _scene$progress$next2.removeListener) === null || _scene$progress$next3 === void 0 ? void 0 : _scene$progress$next3.call(_scene$progress$next2, listener);\n      }\n    };\n  }, [pointerEvents, scene.progress.next]);\n  const {\n    presentation,\n    animationEnabled,\n    cardOverlay,\n    cardOverlayEnabled,\n    cardShadowEnabled,\n    cardStyle,\n    cardStyleInterpolator,\n    gestureDirection,\n    gestureEnabled,\n    gestureResponseDistance,\n    gestureVelocityImpact,\n    headerMode,\n    headerShown,\n    transitionSpec\n  } = scene.descriptor.options;\n  const previousScene = getPreviousScene({\n    route: scene.descriptor.route\n  });\n  let backTitle;\n\n  if (previousScene) {\n    const {\n      options,\n      route\n    } = previousScene.descriptor;\n    backTitle = getHeaderTitle(options, route.name);\n  }\n\n  const headerBack = React.useMemo(() => backTitle !== undefined ? {\n    title: backTitle\n  } : undefined, [backTitle]);\n  return /*#__PURE__*/React.createElement(Card, {\n    interpolationIndex: interpolationIndex,\n    gestureDirection: gestureDirection,\n    layout: layout,\n    insets: insets,\n    gesture: gesture,\n    current: scene.progress.current,\n    next: scene.progress.next,\n    closing: closing,\n    onOpen: handleOpen,\n    onClose: handleClose,\n    overlay: cardOverlay,\n    overlayEnabled: cardOverlayEnabled,\n    shadowEnabled: cardShadowEnabled,\n    onTransition: handleTransition,\n    onGestureBegin: handleGestureBegin,\n    onGestureCanceled: handleGestureCanceled,\n    onGestureEnd: handleGestureEnd,\n    gestureEnabled: index === 0 ? false : gestureEnabled,\n    gestureResponseDistance: gestureResponseDistance,\n    gestureVelocityImpact: gestureVelocityImpact,\n    transitionSpec: transitionSpec,\n    styleInterpolator: cardStyleInterpolator,\n    accessibilityElementsHidden: !focused,\n    importantForAccessibility: focused ? 'auto' : 'no-hide-descendants',\n    pointerEvents: active ? 'box-none' : pointerEvents,\n    pageOverflowEnabled: headerMode !== 'float' && presentation !== 'modal',\n    headerDarkContent: headerDarkContent,\n    containerStyle: hasAbsoluteFloatHeader && headerMode !== 'screen' ? {\n      marginTop: headerHeight\n    } : null,\n    contentStyle: [{\n      backgroundColor: presentation === 'transparentModal' ? 'transparent' : colors.background\n    }, cardStyle],\n    style: [{\n      // This is necessary to avoid unfocused larger pages increasing scroll area\n      // The issue can be seen on the web when a smaller screen is pushed over a larger one\n      overflow: active ? undefined : 'hidden',\n      display: // Hide unfocused screens when animation isn't enabled\n      // This is also necessary for a11y on web\n      animationEnabled === false && isNextScreenTransparent === false && detachCurrentScreen !== false && !focused ? 'none' : 'flex'\n    }, StyleSheet.absoluteFill]\n  }, /*#__PURE__*/React.createElement(View, {\n    style: styles.container\n  }, /*#__PURE__*/React.createElement(ModalPresentationContext.Provider, {\n    value: modal\n  }, /*#__PURE__*/React.createElement(View, {\n    style: styles.scene\n  }, /*#__PURE__*/React.createElement(HeaderBackContext.Provider, {\n    value: headerBack\n  }, /*#__PURE__*/React.createElement(HeaderShownContext.Provider, {\n    value: isParentHeaderShown || headerShown !== false\n  }, /*#__PURE__*/React.createElement(HeaderHeightContext.Provider, {\n    value: headerShown ? headerHeight : parentHeaderHeight !== null && parentHeaderHeight !== void 0 ? parentHeaderHeight : 0\n  }, renderScene({\n    route: scene.descriptor.route\n  }))))), headerMode !== 'float' ? renderHeader({\n    mode: 'screen',\n    layout,\n    scenes: [previousScene, scene],\n    getPreviousScene,\n    getFocusedRoute,\n    onContentHeightChange: onHeaderHeightChange\n  }) : null)));\n}\n\nexport default /*#__PURE__*/React.memo(CardContainer);\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column-reverse'\n  },\n  scene: {\n    flex: 1\n  }\n});","map":{"version":3,"sources":["CardContainer.tsx"],"names":["EPSILON","scene","parentHeaderHeight","React","onPageChangeConfirm","useKeyboardManager","navigation","options","handleOpen","route","onTransitionEnd","onOpenRoute","handleClose","onCloseRoute","handleGestureBegin","onPageChangeStart","onGestureStart","handleGestureCanceled","onPageChangeCancel","onGestureCancel","handleGestureEnd","onGestureEnd","handleTransition","gesture","active","onTransitionStart","insets","top","right","bottom","left","safeAreaInsetLeft","colors","useTheme","listener","value","setPointerEvents","transitionSpec","previousScene","getPreviousScene","backTitle","getHeaderTitle","headerBack","title","index","focused","headerMode","presentation","marginTop","headerHeight","backgroundColor","background","overflow","display","animationEnabled","isNextScreenTransparent","detachCurrentScreen","StyleSheet","styles","container","modal","isParentHeaderShown","headerShown","renderScene","renderHeader","mode","scenes","onContentHeightChange","onHeaderHeightChange","flex","flexDirection"],"mappings":"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","sourcesContent":["import {\n  getHeaderTitle,\n  HeaderBackContext,\n  HeaderHeightContext,\n  HeaderShownContext,\n} from '@react-navigation/elements';\nimport { Route, useTheme } from '@react-navigation/native';\nimport * as React from 'react';\nimport { Animated, StyleSheet, View } from 'react-native';\n\nimport type { Layout, Scene } from '../../types';\nimport ModalPresentationContext from '../../utils/ModalPresentationContext';\nimport useKeyboardManager from '../../utils/useKeyboardManager';\nimport type { Props as HeaderContainerProps } from '../Header/HeaderContainer';\nimport Card from './Card';\n\ntype Props = {\n  interpolationIndex: number;\n  index: number;\n  active: boolean;\n  focused: boolean;\n  closing: boolean;\n  modal: boolean;\n  layout: Layout;\n  gesture: Animated.Value;\n  scene: Scene;\n  headerDarkContent: boolean | undefined;\n  safeAreaInsetTop: number;\n  safeAreaInsetRight: number;\n  safeAreaInsetBottom: number;\n  safeAreaInsetLeft: number;\n  getPreviousScene: (props: { route: Route<string> }) => Scene | undefined;\n  getFocusedRoute: () => Route<string>;\n  renderHeader: (props: HeaderContainerProps) => React.ReactNode;\n  renderScene: (props: { route: Route<string> }) => React.ReactNode;\n  onOpenRoute: (props: { route: Route<string> }) => void;\n  onCloseRoute: (props: { route: Route<string> }) => void;\n  onTransitionStart: (\n    props: { route: Route<string> },\n    closing: boolean\n  ) => void;\n  onTransitionEnd: (props: { route: Route<string> }, closing: boolean) => void;\n  onGestureStart: (props: { route: Route<string> }) => void;\n  onGestureEnd: (props: { route: Route<string> }) => void;\n  onGestureCancel: (props: { route: Route<string> }) => void;\n  hasAbsoluteFloatHeader: boolean;\n  headerHeight: number;\n  onHeaderHeightChange: (props: {\n    route: Route<string>;\n    height: number;\n  }) => void;\n  isParentHeaderShown: boolean;\n  isNextScreenTransparent: boolean;\n  detachCurrentScreen: boolean;\n};\n\nconst EPSILON = 0.1;\n\nfunction CardContainer({\n  interpolationIndex,\n  index,\n  active,\n  closing,\n  gesture,\n  focused,\n  modal,\n  getPreviousScene,\n  getFocusedRoute,\n  headerDarkContent,\n  hasAbsoluteFloatHeader,\n  headerHeight,\n  onHeaderHeightChange,\n  isParentHeaderShown,\n  isNextScreenTransparent,\n  detachCurrentScreen,\n  layout,\n  onCloseRoute,\n  onOpenRoute,\n  onGestureCancel,\n  onGestureEnd,\n  onGestureStart,\n  onTransitionEnd,\n  onTransitionStart,\n  renderHeader,\n  renderScene,\n  safeAreaInsetBottom,\n  safeAreaInsetLeft,\n  safeAreaInsetRight,\n  safeAreaInsetTop,\n  scene,\n}: Props) {\n  const parentHeaderHeight = React.useContext(HeaderHeightContext);\n\n  const { onPageChangeStart, onPageChangeCancel, onPageChangeConfirm } =\n    useKeyboardManager(\n      React.useCallback(() => {\n        const { options, navigation } = scene.descriptor;\n\n        return (\n          navigation.isFocused() && options.keyboardHandlingEnabled !== false\n        );\n      }, [scene.descriptor])\n    );\n\n  const handleOpen = () => {\n    const { route } = scene.descriptor;\n\n    onTransitionEnd({ route }, false);\n    onOpenRoute({ route });\n  };\n\n  const handleClose = () => {\n    const { route } = scene.descriptor;\n\n    onTransitionEnd({ route }, true);\n    onCloseRoute({ route });\n  };\n\n  const handleGestureBegin = () => {\n    const { route } = scene.descriptor;\n\n    onPageChangeStart();\n    onGestureStart({ route });\n  };\n\n  const handleGestureCanceled = () => {\n    const { route } = scene.descriptor;\n\n    onPageChangeCancel();\n    onGestureCancel({ route });\n  };\n\n  const handleGestureEnd = () => {\n    const { route } = scene.descriptor;\n\n    onGestureEnd({ route });\n  };\n\n  const handleTransition = ({\n    closing,\n    gesture,\n  }: {\n    closing: boolean;\n    gesture: boolean;\n  }) => {\n    const { route } = scene.descriptor;\n\n    if (!gesture) {\n      onPageChangeConfirm?.(true);\n    } else if (active && closing) {\n      onPageChangeConfirm?.(false);\n    } else {\n      onPageChangeCancel?.();\n    }\n\n    onTransitionStart?.({ route }, closing);\n  };\n\n  const insets = {\n    top: safeAreaInsetTop,\n    right: safeAreaInsetRight,\n    bottom: safeAreaInsetBottom,\n    left: safeAreaInsetLeft,\n  };\n\n  const { colors } = useTheme();\n\n  const [pointerEvents, setPointerEvents] =\n    React.useState<'box-none' | 'none'>('box-none');\n\n  React.useEffect(() => {\n    const listener = scene.progress.next?.addListener?.(\n      ({ value }: { value: number }) => {\n        setPointerEvents(value <= EPSILON ? 'box-none' : 'none');\n      }\n    );\n\n    return () => {\n      if (listener) {\n        scene.progress.next?.removeListener?.(listener);\n      }\n    };\n  }, [pointerEvents, scene.progress.next]);\n\n  const {\n    presentation,\n    animationEnabled,\n    cardOverlay,\n    cardOverlayEnabled,\n    cardShadowEnabled,\n    cardStyle,\n    cardStyleInterpolator,\n    gestureDirection,\n    gestureEnabled,\n    gestureResponseDistance,\n    gestureVelocityImpact,\n    headerMode,\n    headerShown,\n    transitionSpec,\n  } = scene.descriptor.options;\n\n  const previousScene = getPreviousScene({ route: scene.descriptor.route });\n\n  let backTitle: string | undefined;\n\n  if (previousScene) {\n    const { options, route } = previousScene.descriptor;\n\n    backTitle = getHeaderTitle(options, route.name);\n  }\n\n  const headerBack = React.useMemo(\n    () => (backTitle !== undefined ? { title: backTitle } : undefined),\n    [backTitle]\n  );\n\n  return (\n    <Card\n      interpolationIndex={interpolationIndex}\n      gestureDirection={gestureDirection}\n      layout={layout}\n      insets={insets}\n      gesture={gesture}\n      current={scene.progress.current}\n      next={scene.progress.next}\n      closing={closing}\n      onOpen={handleOpen}\n      onClose={handleClose}\n      overlay={cardOverlay}\n      overlayEnabled={cardOverlayEnabled}\n      shadowEnabled={cardShadowEnabled}\n      onTransition={handleTransition}\n      onGestureBegin={handleGestureBegin}\n      onGestureCanceled={handleGestureCanceled}\n      onGestureEnd={handleGestureEnd}\n      gestureEnabled={index === 0 ? false : gestureEnabled}\n      gestureResponseDistance={gestureResponseDistance}\n      gestureVelocityImpact={gestureVelocityImpact}\n      transitionSpec={transitionSpec}\n      styleInterpolator={cardStyleInterpolator}\n      accessibilityElementsHidden={!focused}\n      importantForAccessibility={focused ? 'auto' : 'no-hide-descendants'}\n      pointerEvents={active ? 'box-none' : pointerEvents}\n      pageOverflowEnabled={headerMode !== 'float' && presentation !== 'modal'}\n      headerDarkContent={headerDarkContent}\n      containerStyle={\n        hasAbsoluteFloatHeader && headerMode !== 'screen'\n          ? { marginTop: headerHeight }\n          : null\n      }\n      contentStyle={[\n        {\n          backgroundColor:\n            presentation === 'transparentModal'\n              ? 'transparent'\n              : colors.background,\n        },\n        cardStyle,\n      ]}\n      style={[\n        {\n          // This is necessary to avoid unfocused larger pages increasing scroll area\n          // The issue can be seen on the web when a smaller screen is pushed over a larger one\n          overflow: active ? undefined : 'hidden',\n          display:\n            // Hide unfocused screens when animation isn't enabled\n            // This is also necessary for a11y on web\n            animationEnabled === false &&\n            isNextScreenTransparent === false &&\n            detachCurrentScreen !== false &&\n            !focused\n              ? 'none'\n              : 'flex',\n        },\n        StyleSheet.absoluteFill,\n      ]}\n    >\n      <View style={styles.container}>\n        <ModalPresentationContext.Provider value={modal}>\n          <View style={styles.scene}>\n            <HeaderBackContext.Provider value={headerBack}>\n              <HeaderShownContext.Provider\n                value={isParentHeaderShown || headerShown !== false}\n              >\n                <HeaderHeightContext.Provider\n                  value={headerShown ? headerHeight : parentHeaderHeight ?? 0}\n                >\n                  {renderScene({ route: scene.descriptor.route })}\n                </HeaderHeightContext.Provider>\n              </HeaderShownContext.Provider>\n            </HeaderBackContext.Provider>\n          </View>\n          {headerMode !== 'float'\n            ? renderHeader({\n                mode: 'screen',\n                layout,\n                scenes: [previousScene, scene],\n                getPreviousScene,\n                getFocusedRoute,\n                onContentHeightChange: onHeaderHeightChange,\n              })\n            : null}\n        </ModalPresentationContext.Provider>\n      </View>\n    </Card>\n  );\n}\n\nexport default React.memo(CardContainer);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column-reverse',\n  },\n  scene: {\n    flex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}