{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport Color from 'color';\nimport * as React from 'react';\nimport { Animated, InteractionManager, Platform, StyleSheet, View } from 'react-native';\nimport { forModalPresentationIOS } from '../../TransitionConfigs/CardStyleInterpolators';\nimport CardAnimationContext from '../../utils/CardAnimationContext';\nimport getDistanceForDirection from '../../utils/getDistanceForDirection';\nimport getInvertedMultiplier from '../../utils/getInvertedMultiplier';\nimport memoize from '../../utils/memoize';\nimport { GestureState, PanGestureHandler } from '../GestureHandler';\nimport ModalStatusBarManager from '../ModalStatusBarManager';\nimport CardSheet from './CardSheet';\nconst GESTURE_VELOCITY_IMPACT = 0.3;\nconst TRUE = 1;\nconst FALSE = 0;\n/**\n * The distance of touch start from the edge of the screen where the gesture will be recognized\n */\n\nconst GESTURE_RESPONSE_DISTANCE_HORIZONTAL = 50;\nconst GESTURE_RESPONSE_DISTANCE_VERTICAL = 135;\nconst useNativeDriver = Platform.OS !== 'web';\n\nconst hasOpacityStyle = style => {\n  if (style) {\n    const flattenedStyle = StyleSheet.flatten(style);\n    return flattenedStyle.opacity != null;\n  }\n\n  return false;\n};\n\nexport default class Card extends React.Component {\n  constructor() {\n    super(...arguments);\n\n    _defineProperty(this, \"isCurrentlyMounted\", false);\n\n    _defineProperty(this, \"isClosing\", new Animated.Value(FALSE));\n\n    _defineProperty(this, \"inverted\", new Animated.Value(getInvertedMultiplier(this.props.gestureDirection)));\n\n    _defineProperty(this, \"layout\", {\n      width: new Animated.Value(this.props.layout.width),\n      height: new Animated.Value(this.props.layout.height)\n    });\n\n    _defineProperty(this, \"isSwiping\", new Animated.Value(FALSE));\n\n    _defineProperty(this, \"interactionHandle\", void 0);\n\n    _defineProperty(this, \"pendingGestureCallback\", void 0);\n\n    _defineProperty(this, \"lastToValue\", void 0);\n\n    _defineProperty(this, \"animate\", _ref => {\n      let {\n        closing,\n        velocity\n      } = _ref;\n      const {\n        gesture,\n        transitionSpec,\n        onOpen,\n        onClose,\n        onTransition\n      } = this.props;\n      const toValue = this.getAnimateToValue({ ...this.props,\n        closing\n      });\n      this.lastToValue = toValue;\n      this.isClosing.setValue(closing ? TRUE : FALSE);\n      const spec = closing ? transitionSpec.close : transitionSpec.open;\n      const animation = spec.animation === 'spring' ? Animated.spring : Animated.timing;\n      this.setPointerEventsEnabled(!closing);\n      this.handleStartInteraction();\n      clearTimeout(this.pendingGestureCallback);\n      onTransition === null || onTransition === void 0 ? void 0 : onTransition({\n        closing,\n        gesture: velocity !== undefined\n      });\n      animation(gesture, { ...spec.config,\n        velocity,\n        toValue,\n        useNativeDriver,\n        isInteraction: false\n      }).start(_ref2 => {\n        let {\n          finished\n        } = _ref2;\n        this.handleEndInteraction();\n        clearTimeout(this.pendingGestureCallback);\n\n        if (finished) {\n          if (closing) {\n            onClose();\n          } else {\n            onOpen();\n          }\n\n          if (this.isCurrentlyMounted) {\n            // Make sure to re-open screen if it wasn't removed\n            this.forceUpdate();\n          }\n        }\n      });\n    });\n\n    _defineProperty(this, \"getAnimateToValue\", _ref3 => {\n      let {\n        closing,\n        layout,\n        gestureDirection\n      } = _ref3;\n\n      if (!closing) {\n        return 0;\n      }\n\n      return getDistanceForDirection(layout, gestureDirection);\n    });\n\n    _defineProperty(this, \"setPointerEventsEnabled\", enabled => {\n      var _this$contentRef$curr;\n\n      const pointerEvents = enabled ? 'box-none' : 'none';\n      (_this$contentRef$curr = this.contentRef.current) === null || _this$contentRef$curr === void 0 ? void 0 : _this$contentRef$curr.setNativeProps({\n        pointerEvents\n      });\n    });\n\n    _defineProperty(this, \"handleStartInteraction\", () => {\n      if (this.interactionHandle === undefined) {\n        this.interactionHandle = InteractionManager.createInteractionHandle();\n      }\n    });\n\n    _defineProperty(this, \"handleEndInteraction\", () => {\n      if (this.interactionHandle !== undefined) {\n        InteractionManager.clearInteractionHandle(this.interactionHandle);\n        this.interactionHandle = undefined;\n      }\n    });\n\n    _defineProperty(this, \"handleGestureStateChange\", _ref4 => {\n      let {\n        nativeEvent\n      } = _ref4;\n      const {\n        layout,\n        onClose,\n        onGestureBegin,\n        onGestureCanceled,\n        onGestureEnd,\n        gestureDirection,\n        gestureVelocityImpact\n      } = this.props;\n\n      switch (nativeEvent.state) {\n        case GestureState.BEGAN:\n          this.isSwiping.setValue(TRUE);\n          this.handleStartInteraction();\n          onGestureBegin === null || onGestureBegin === void 0 ? void 0 : onGestureBegin();\n          break;\n\n        case GestureState.CANCELLED:\n          {\n            this.isSwiping.setValue(FALSE);\n            this.handleEndInteraction();\n            const velocity = gestureDirection === 'vertical' || gestureDirection === 'vertical-inverted' ? nativeEvent.velocityY : nativeEvent.velocityX;\n            this.animate({\n              closing: this.props.closing,\n              velocity\n            });\n            onGestureCanceled === null || onGestureCanceled === void 0 ? void 0 : onGestureCanceled();\n            break;\n          }\n\n        case GestureState.END:\n          {\n            this.isSwiping.setValue(FALSE);\n            let distance;\n            let translation;\n            let velocity;\n\n            if (gestureDirection === 'vertical' || gestureDirection === 'vertical-inverted') {\n              distance = layout.height;\n              translation = nativeEvent.translationY;\n              velocity = nativeEvent.velocityY;\n            } else {\n              distance = layout.width;\n              translation = nativeEvent.translationX;\n              velocity = nativeEvent.velocityX;\n            }\n\n            const closing = (translation + velocity * gestureVelocityImpact) * getInvertedMultiplier(gestureDirection) > distance / 2 ? velocity !== 0 || translation !== 0 : this.props.closing;\n            this.animate({\n              closing,\n              velocity\n            });\n\n            if (closing) {\n              // We call onClose with a delay to make sure that the animation has already started\n              // This will make sure that the state update caused by this doesn't affect start of animation\n              this.pendingGestureCallback = setTimeout(() => {\n                onClose(); // Trigger an update after we dispatch the action to remove the screen\n                // This will make sure that we check if the screen didn't get removed so we can cancel the animation\n\n                this.forceUpdate();\n              }, 32);\n            }\n\n            onGestureEnd === null || onGestureEnd === void 0 ? void 0 : onGestureEnd();\n            break;\n          }\n      }\n    });\n\n    _defineProperty(this, \"getInterpolatedStyle\", memoize((styleInterpolator, animation) => styleInterpolator(animation)));\n\n    _defineProperty(this, \"getCardAnimation\", memoize((interpolationIndex, current, next, layout, insetTop, insetRight, insetBottom, insetLeft) => ({\n      index: interpolationIndex,\n      current: {\n        progress: current\n      },\n      next: next && {\n        progress: next\n      },\n      closing: this.isClosing,\n      swiping: this.isSwiping,\n      inverted: this.inverted,\n      layouts: {\n        screen: layout\n      },\n      insets: {\n        top: insetTop,\n        right: insetRight,\n        bottom: insetBottom,\n        left: insetLeft\n      }\n    })));\n\n    _defineProperty(this, \"contentRef\", /*#__PURE__*/React.createRef());\n  }\n\n  componentDidMount() {\n    this.animate({\n      closing: this.props.closing\n    });\n    this.isCurrentlyMounted = true;\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      layout,\n      gestureDirection,\n      closing\n    } = this.props;\n    const {\n      width,\n      height\n    } = layout;\n\n    if (width !== prevProps.layout.width) {\n      this.layout.width.setValue(width);\n    }\n\n    if (height !== prevProps.layout.height) {\n      this.layout.height.setValue(height);\n    }\n\n    if (gestureDirection !== prevProps.gestureDirection) {\n      this.inverted.setValue(getInvertedMultiplier(gestureDirection));\n    }\n\n    const toValue = this.getAnimateToValue(this.props);\n\n    if (this.getAnimateToValue(prevProps) !== toValue || this.lastToValue !== toValue) {\n      // We need to trigger the animation when route was closed\n      // Thr route might have been closed by a `POP` action or by a gesture\n      // When route was closed due to a gesture, the animation would've happened already\n      // It's still important to trigger the animation so that `onClose` is called\n      // If `onClose` is not called, cleanup step won't be performed for gestures\n      this.animate({\n        closing\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    this.props.gesture.stopAnimation();\n    this.isCurrentlyMounted = false;\n    this.handleEndInteraction();\n  }\n\n  gestureActivationCriteria() {\n    const {\n      layout,\n      gestureDirection,\n      gestureResponseDistance\n    } = this.props;\n    const enableTrackpadTwoFingerGesture = true;\n    const distance = gestureResponseDistance !== undefined ? gestureResponseDistance : gestureDirection === 'vertical' || gestureDirection === 'vertical-inverted' ? GESTURE_RESPONSE_DISTANCE_VERTICAL : GESTURE_RESPONSE_DISTANCE_HORIZONTAL;\n\n    if (gestureDirection === 'vertical') {\n      return {\n        maxDeltaX: 15,\n        minOffsetY: 5,\n        hitSlop: {\n          bottom: -layout.height + distance\n        },\n        enableTrackpadTwoFingerGesture\n      };\n    } else if (gestureDirection === 'vertical-inverted') {\n      return {\n        maxDeltaX: 15,\n        minOffsetY: -5,\n        hitSlop: {\n          top: -layout.height + distance\n        },\n        enableTrackpadTwoFingerGesture\n      };\n    } else {\n      const hitSlop = -layout.width + distance;\n      const invertedMultiplier = getInvertedMultiplier(gestureDirection);\n\n      if (invertedMultiplier === 1) {\n        return {\n          minOffsetX: 5,\n          maxDeltaY: 20,\n          hitSlop: {\n            right: hitSlop\n          },\n          enableTrackpadTwoFingerGesture\n        };\n      } else {\n        return {\n          minOffsetX: -5,\n          maxDeltaY: 20,\n          hitSlop: {\n            left: hitSlop\n          },\n          enableTrackpadTwoFingerGesture\n        };\n      }\n    }\n  }\n\n  render() {\n    const {\n      styleInterpolator,\n      interpolationIndex,\n      current,\n      gesture,\n      next,\n      layout,\n      insets,\n      overlay,\n      overlayEnabled,\n      shadowEnabled,\n      gestureEnabled,\n      gestureDirection,\n      pageOverflowEnabled,\n      headerDarkContent,\n      children,\n      containerStyle: customContainerStyle,\n      contentStyle,\n      ...rest\n    } = this.props;\n    const interpolationProps = this.getCardAnimation(interpolationIndex, current, next, layout, insets.top, insets.right, insets.bottom, insets.left);\n    const interpolatedStyle = this.getInterpolatedStyle(styleInterpolator, interpolationProps);\n    const {\n      containerStyle,\n      cardStyle,\n      overlayStyle,\n      shadowStyle\n    } = interpolatedStyle;\n    const handleGestureEvent = gestureEnabled ? Animated.event([{\n      nativeEvent: gestureDirection === 'vertical' || gestureDirection === 'vertical-inverted' ? {\n        translationY: gesture\n      } : {\n        translationX: gesture\n      }\n    }], {\n      useNativeDriver\n    }) : undefined;\n    const {\n      backgroundColor\n    } = StyleSheet.flatten(contentStyle || {});\n    const isTransparent = typeof backgroundColor === 'string' ? Color(backgroundColor).alpha() === 0 : false;\n    return /*#__PURE__*/React.createElement(CardAnimationContext.Provider, {\n      value: interpolationProps\n    }, // StatusBar messes with translucent status bar on Android\n    // So we should only enable it on iOS\n    Platform.OS === 'ios' && overlayEnabled && next && getIsModalPresentation(styleInterpolator) ? /*#__PURE__*/React.createElement(ModalStatusBarManager, {\n      dark: headerDarkContent,\n      layout: layout,\n      insets: insets,\n      style: cardStyle\n    }) : null, /*#__PURE__*/React.createElement(Animated.View, {\n      style: {\n        // This is a dummy style that doesn't actually change anything visually.\n        // Animated needs the animated value to be used somewhere, otherwise things don't update properly.\n        // If we disable animations and hide header, it could end up making the value unused.\n        // So we have this dummy style that will always be used regardless of what else changed.\n        opacity: current\n      } // Make sure that this view isn't removed. If this view is removed, our style with animated value won't apply\n      ,\n      collapsable: false\n    }), /*#__PURE__*/React.createElement(View, _extends({\n      pointerEvents: \"box-none\"\n    }, rest), overlayEnabled ? /*#__PURE__*/React.createElement(View, {\n      pointerEvents: \"box-none\",\n      style: StyleSheet.absoluteFill\n    }, overlay({\n      style: overlayStyle\n    })) : null, /*#__PURE__*/React.createElement(Animated.View, {\n      style: [styles.container, containerStyle, customContainerStyle],\n      pointerEvents: \"box-none\"\n    }, /*#__PURE__*/React.createElement(PanGestureHandler, _extends({\n      enabled: layout.width !== 0 && gestureEnabled,\n      onGestureEvent: handleGestureEvent,\n      onHandlerStateChange: this.handleGestureStateChange\n    }, this.gestureActivationCriteria()), /*#__PURE__*/React.createElement(Animated.View, {\n      needsOffscreenAlphaCompositing: hasOpacityStyle(cardStyle),\n      style: [styles.container, cardStyle]\n    }, shadowEnabled && shadowStyle && !isTransparent ? /*#__PURE__*/React.createElement(Animated.View, {\n      style: [styles.shadow, gestureDirection === 'horizontal' ? [styles.shadowHorizontal, styles.shadowLeft] : gestureDirection === 'horizontal-inverted' ? [styles.shadowHorizontal, styles.shadowRight] : gestureDirection === 'vertical' ? [styles.shadowVertical, styles.shadowTop] : [styles.shadowVertical, styles.shadowBottom], {\n        backgroundColor\n      }, shadowStyle],\n      pointerEvents: \"none\"\n    }) : null, /*#__PURE__*/React.createElement(CardSheet, {\n      ref: this.contentRef,\n      enabled: pageOverflowEnabled,\n      layout: layout,\n      style: contentStyle\n    }, children))))));\n  }\n\n}\n\n_defineProperty(Card, \"defaultProps\", {\n  shadowEnabled: false,\n  gestureEnabled: true,\n  gestureVelocityImpact: GESTURE_VELOCITY_IMPACT,\n  overlay: _ref5 => {\n    let {\n      style\n    } = _ref5;\n    return style ? /*#__PURE__*/React.createElement(Animated.View, {\n      pointerEvents: \"none\",\n      style: [styles.overlay, style]\n    }) : null;\n  }\n});\n\nexport const getIsModalPresentation = cardStyleInterpolator => {\n  return cardStyleInterpolator === forModalPresentationIOS || // Handle custom modal presentation interpolators as well\n  cardStyleInterpolator.name === 'forModalPresentationIOS';\n};\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  overlay: {\n    flex: 1,\n    backgroundColor: '#000'\n  },\n  shadow: {\n    position: 'absolute',\n    shadowRadius: 5,\n    shadowColor: '#000',\n    shadowOpacity: 0.3\n  },\n  shadowHorizontal: {\n    top: 0,\n    bottom: 0,\n    width: 3,\n    shadowOffset: {\n      width: -1,\n      height: 1\n    }\n  },\n  shadowLeft: {\n    left: 0\n  },\n  shadowRight: {\n    right: 0\n  },\n  shadowVertical: {\n    left: 0,\n    right: 0,\n    height: 3,\n    shadowOffset: {\n      width: 1,\n      height: -1\n    }\n  },\n  shadowTop: {\n    top: 0\n  },\n  shadowBottom: {\n    bottom: 0\n  }\n});","map":{"version":3,"sources":["Card.tsx"],"names":["GESTURE_VELOCITY_IMPACT","TRUE","FALSE","GESTURE_RESPONSE_DISTANCE_HORIZONTAL","GESTURE_RESPONSE_DISTANCE_VERTICAL","useNativeDriver","Platform","hasOpacityStyle","style","flattenedStyle","StyleSheet","Card","React","shadowEnabled","gestureEnabled","gestureVelocityImpact","overlay","styles","componentDidMount","closing","componentDidUpdate","height","width","prevProps","gestureDirection","getInvertedMultiplier","toValue","componentWillUnmount","Animated","velocity","onTransition","spec","transitionSpec","animation","clearTimeout","gesture","undefined","isInteraction","finished","onClose","onOpen","getDistanceForDirection","enabled","pointerEvents","InteractionManager","nativeEvent","GestureState","onGestureBegin","onGestureCanceled","distance","layout","translation","setTimeout","onGestureEnd","memoize","styleInterpolator","index","current","progress","next","swiping","inverted","layouts","screen","insets","top","right","bottom","left","insetLeft","gestureActivationCriteria","gestureResponseDistance","enableTrackpadTwoFingerGesture","maxDeltaX","minOffsetY","hitSlop","invertedMultiplier","minOffsetX","maxDeltaY","render","containerStyle","rest","interpolationProps","interpolatedStyle","shadowStyle","handleGestureEvent","translationY","translationX","backgroundColor","contentStyle","isTransparent","Color","getIsModalPresentation","cardStyle","opacity","overlayEnabled","absoluteFill","overlayStyle","handleGestureStateChange","cardStyleInterpolator","container","flex","shadow","position","shadowRadius","shadowColor","shadowOpacity","shadowHorizontal","shadowOffset","shadowLeft","shadowRight","shadowVertical","shadowTop","shadowBottom"],"mappings":"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","sourcesContent":["import Color from 'color';\nimport * as React from 'react';\nimport {\n  Animated,\n  InteractionManager,\n  Platform,\n  StyleProp,\n  StyleSheet,\n  View,\n  ViewProps,\n  ViewStyle,\n} from 'react-native';\nimport type { EdgeInsets } from 'react-native-safe-area-context';\n\nimport { forModalPresentationIOS } from '../../TransitionConfigs/CardStyleInterpolators';\nimport type {\n  GestureDirection,\n  Layout,\n  StackCardInterpolationProps,\n  StackCardStyleInterpolator,\n  TransitionSpec,\n} from '../../types';\nimport CardAnimationContext from '../../utils/CardAnimationContext';\nimport getDistanceForDirection from '../../utils/getDistanceForDirection';\nimport getInvertedMultiplier from '../../utils/getInvertedMultiplier';\nimport memoize from '../../utils/memoize';\nimport {\n  GestureState,\n  PanGestureHandler,\n  PanGestureHandlerGestureEvent,\n} from '../GestureHandler';\nimport ModalStatusBarManager from '../ModalStatusBarManager';\nimport CardSheet from './CardSheet';\n\ntype Props = ViewProps & {\n  interpolationIndex: number;\n  closing: boolean;\n  next?: Animated.AnimatedInterpolation;\n  current: Animated.AnimatedInterpolation;\n  gesture: Animated.Value;\n  layout: Layout;\n  insets: EdgeInsets;\n  headerDarkContent: boolean | undefined;\n  pageOverflowEnabled: boolean;\n  gestureDirection: GestureDirection;\n  onOpen: () => void;\n  onClose: () => void;\n  onTransition: (props: { closing: boolean; gesture: boolean }) => void;\n  onGestureBegin: () => void;\n  onGestureCanceled: () => void;\n  onGestureEnd: () => void;\n  children: React.ReactNode;\n  overlay: (props: {\n    style: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\n  }) => React.ReactNode;\n  overlayEnabled: boolean;\n  shadowEnabled: boolean;\n  gestureEnabled: boolean;\n  gestureResponseDistance?: number;\n  gestureVelocityImpact: number;\n  transitionSpec: {\n    open: TransitionSpec;\n    close: TransitionSpec;\n  };\n  styleInterpolator: StackCardStyleInterpolator;\n  containerStyle?: StyleProp<ViewStyle>;\n  contentStyle?: StyleProp<ViewStyle>;\n};\n\nconst GESTURE_VELOCITY_IMPACT = 0.3;\n\nconst TRUE = 1;\nconst FALSE = 0;\n\n/**\n * The distance of touch start from the edge of the screen where the gesture will be recognized\n */\nconst GESTURE_RESPONSE_DISTANCE_HORIZONTAL = 50;\nconst GESTURE_RESPONSE_DISTANCE_VERTICAL = 135;\n\nconst useNativeDriver = Platform.OS !== 'web';\n\nconst hasOpacityStyle = (style: any) => {\n  if (style) {\n    const flattenedStyle = StyleSheet.flatten(style);\n    return flattenedStyle.opacity != null;\n  }\n\n  return false;\n};\n\nexport default class Card extends React.Component<Props> {\n  static defaultProps = {\n    shadowEnabled: false,\n    gestureEnabled: true,\n    gestureVelocityImpact: GESTURE_VELOCITY_IMPACT,\n    overlay: ({\n      style,\n    }: {\n      style: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\n    }) =>\n      style ? (\n        <Animated.View pointerEvents=\"none\" style={[styles.overlay, style]} />\n      ) : null,\n  };\n\n  componentDidMount() {\n    this.animate({ closing: this.props.closing });\n    this.isCurrentlyMounted = true;\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const { layout, gestureDirection, closing } = this.props;\n    const { width, height } = layout;\n\n    if (width !== prevProps.layout.width) {\n      this.layout.width.setValue(width);\n    }\n\n    if (height !== prevProps.layout.height) {\n      this.layout.height.setValue(height);\n    }\n\n    if (gestureDirection !== prevProps.gestureDirection) {\n      this.inverted.setValue(getInvertedMultiplier(gestureDirection));\n    }\n\n    const toValue = this.getAnimateToValue(this.props);\n\n    if (\n      this.getAnimateToValue(prevProps) !== toValue ||\n      this.lastToValue !== toValue\n    ) {\n      // We need to trigger the animation when route was closed\n      // Thr route might have been closed by a `POP` action or by a gesture\n      // When route was closed due to a gesture, the animation would've happened already\n      // It's still important to trigger the animation so that `onClose` is called\n      // If `onClose` is not called, cleanup step won't be performed for gestures\n      this.animate({ closing });\n    }\n  }\n\n  componentWillUnmount() {\n    this.props.gesture.stopAnimation();\n    this.isCurrentlyMounted = false;\n    this.handleEndInteraction();\n  }\n\n  private isCurrentlyMounted = false;\n\n  private isClosing = new Animated.Value(FALSE);\n\n  private inverted = new Animated.Value(\n    getInvertedMultiplier(this.props.gestureDirection)\n  );\n\n  private layout = {\n    width: new Animated.Value(this.props.layout.width),\n    height: new Animated.Value(this.props.layout.height),\n  };\n\n  private isSwiping = new Animated.Value(FALSE);\n\n  private interactionHandle: number | undefined;\n\n  private pendingGestureCallback: number | undefined;\n\n  private lastToValue: number | undefined;\n\n  private animate = ({\n    closing,\n    velocity,\n  }: {\n    closing: boolean;\n    velocity?: number;\n  }) => {\n    const { gesture, transitionSpec, onOpen, onClose, onTransition } =\n      this.props;\n\n    const toValue = this.getAnimateToValue({\n      ...this.props,\n      closing,\n    });\n\n    this.lastToValue = toValue;\n\n    this.isClosing.setValue(closing ? TRUE : FALSE);\n\n    const spec = closing ? transitionSpec.close : transitionSpec.open;\n\n    const animation =\n      spec.animation === 'spring' ? Animated.spring : Animated.timing;\n\n    this.setPointerEventsEnabled(!closing);\n    this.handleStartInteraction();\n\n    clearTimeout(this.pendingGestureCallback);\n\n    onTransition?.({ closing, gesture: velocity !== undefined });\n    animation(gesture, {\n      ...spec.config,\n      velocity,\n      toValue,\n      useNativeDriver,\n      isInteraction: false,\n    }).start(({ finished }) => {\n      this.handleEndInteraction();\n\n      clearTimeout(this.pendingGestureCallback);\n\n      if (finished) {\n        if (closing) {\n          onClose();\n        } else {\n          onOpen();\n        }\n\n        if (this.isCurrentlyMounted) {\n          // Make sure to re-open screen if it wasn't removed\n          this.forceUpdate();\n        }\n      }\n    });\n  };\n\n  private getAnimateToValue = ({\n    closing,\n    layout,\n    gestureDirection,\n  }: {\n    closing?: boolean;\n    layout: Layout;\n    gestureDirection: GestureDirection;\n  }) => {\n    if (!closing) {\n      return 0;\n    }\n\n    return getDistanceForDirection(layout, gestureDirection);\n  };\n\n  private setPointerEventsEnabled = (enabled: boolean) => {\n    const pointerEvents = enabled ? 'box-none' : 'none';\n\n    this.contentRef.current?.setNativeProps({ pointerEvents });\n  };\n\n  private handleStartInteraction = () => {\n    if (this.interactionHandle === undefined) {\n      this.interactionHandle = InteractionManager.createInteractionHandle();\n    }\n  };\n\n  private handleEndInteraction = () => {\n    if (this.interactionHandle !== undefined) {\n      InteractionManager.clearInteractionHandle(this.interactionHandle);\n      this.interactionHandle = undefined;\n    }\n  };\n\n  private handleGestureStateChange = ({\n    nativeEvent,\n  }: PanGestureHandlerGestureEvent) => {\n    const {\n      layout,\n      onClose,\n      onGestureBegin,\n      onGestureCanceled,\n      onGestureEnd,\n      gestureDirection,\n      gestureVelocityImpact,\n    } = this.props;\n\n    switch (nativeEvent.state) {\n      case GestureState.BEGAN:\n        this.isSwiping.setValue(TRUE);\n        this.handleStartInteraction();\n        onGestureBegin?.();\n        break;\n      case GestureState.CANCELLED: {\n        this.isSwiping.setValue(FALSE);\n        this.handleEndInteraction();\n\n        const velocity =\n          gestureDirection === 'vertical' ||\n          gestureDirection === 'vertical-inverted'\n            ? nativeEvent.velocityY\n            : nativeEvent.velocityX;\n\n        this.animate({ closing: this.props.closing, velocity });\n\n        onGestureCanceled?.();\n        break;\n      }\n      case GestureState.END: {\n        this.isSwiping.setValue(FALSE);\n\n        let distance;\n        let translation;\n        let velocity;\n\n        if (\n          gestureDirection === 'vertical' ||\n          gestureDirection === 'vertical-inverted'\n        ) {\n          distance = layout.height;\n          translation = nativeEvent.translationY;\n          velocity = nativeEvent.velocityY;\n        } else {\n          distance = layout.width;\n          translation = nativeEvent.translationX;\n          velocity = nativeEvent.velocityX;\n        }\n\n        const closing =\n          (translation + velocity * gestureVelocityImpact) *\n            getInvertedMultiplier(gestureDirection) >\n          distance / 2\n            ? velocity !== 0 || translation !== 0\n            : this.props.closing;\n\n        this.animate({ closing, velocity });\n\n        if (closing) {\n          // We call onClose with a delay to make sure that the animation has already started\n          // This will make sure that the state update caused by this doesn't affect start of animation\n          this.pendingGestureCallback = setTimeout(() => {\n            onClose();\n\n            // Trigger an update after we dispatch the action to remove the screen\n            // This will make sure that we check if the screen didn't get removed so we can cancel the animation\n            this.forceUpdate();\n          }, 32) as any as number;\n        }\n\n        onGestureEnd?.();\n        break;\n      }\n    }\n  };\n\n  // Memoize this to avoid extra work on re-render\n  private getInterpolatedStyle = memoize(\n    (\n      styleInterpolator: StackCardStyleInterpolator,\n      animation: StackCardInterpolationProps\n    ) => styleInterpolator(animation)\n  );\n\n  // Keep track of the animation context when deps changes.\n  private getCardAnimation = memoize(\n    (\n      interpolationIndex: number,\n      current: Animated.AnimatedInterpolation,\n      next: Animated.AnimatedInterpolation | undefined,\n      layout: Layout,\n      insetTop: number,\n      insetRight: number,\n      insetBottom: number,\n      insetLeft: number\n    ) => ({\n      index: interpolationIndex,\n      current: { progress: current },\n      next: next && { progress: next },\n      closing: this.isClosing,\n      swiping: this.isSwiping,\n      inverted: this.inverted,\n      layouts: {\n        screen: layout,\n      },\n      insets: {\n        top: insetTop,\n        right: insetRight,\n        bottom: insetBottom,\n        left: insetLeft,\n      },\n    })\n  );\n\n  private gestureActivationCriteria() {\n    const { layout, gestureDirection, gestureResponseDistance } = this.props;\n    const enableTrackpadTwoFingerGesture = true;\n\n    const distance =\n      gestureResponseDistance !== undefined\n        ? gestureResponseDistance\n        : gestureDirection === 'vertical' ||\n          gestureDirection === 'vertical-inverted'\n        ? GESTURE_RESPONSE_DISTANCE_VERTICAL\n        : GESTURE_RESPONSE_DISTANCE_HORIZONTAL;\n\n    if (gestureDirection === 'vertical') {\n      return {\n        maxDeltaX: 15,\n        minOffsetY: 5,\n        hitSlop: { bottom: -layout.height + distance },\n        enableTrackpadTwoFingerGesture,\n      };\n    } else if (gestureDirection === 'vertical-inverted') {\n      return {\n        maxDeltaX: 15,\n        minOffsetY: -5,\n        hitSlop: { top: -layout.height + distance },\n        enableTrackpadTwoFingerGesture,\n      };\n    } else {\n      const hitSlop = -layout.width + distance;\n      const invertedMultiplier = getInvertedMultiplier(gestureDirection);\n\n      if (invertedMultiplier === 1) {\n        return {\n          minOffsetX: 5,\n          maxDeltaY: 20,\n          hitSlop: { right: hitSlop },\n          enableTrackpadTwoFingerGesture,\n        };\n      } else {\n        return {\n          minOffsetX: -5,\n          maxDeltaY: 20,\n          hitSlop: { left: hitSlop },\n          enableTrackpadTwoFingerGesture,\n        };\n      }\n    }\n  }\n\n  private contentRef = React.createRef<View>();\n\n  render() {\n    const {\n      styleInterpolator,\n      interpolationIndex,\n      current,\n      gesture,\n      next,\n      layout,\n      insets,\n      overlay,\n      overlayEnabled,\n      shadowEnabled,\n      gestureEnabled,\n      gestureDirection,\n      pageOverflowEnabled,\n      headerDarkContent,\n      children,\n      containerStyle: customContainerStyle,\n      contentStyle,\n      ...rest\n    } = this.props;\n\n    const interpolationProps = this.getCardAnimation(\n      interpolationIndex,\n      current,\n      next,\n      layout,\n      insets.top,\n      insets.right,\n      insets.bottom,\n      insets.left\n    );\n\n    const interpolatedStyle = this.getInterpolatedStyle(\n      styleInterpolator,\n      interpolationProps\n    );\n\n    const { containerStyle, cardStyle, overlayStyle, shadowStyle } =\n      interpolatedStyle;\n\n    const handleGestureEvent = gestureEnabled\n      ? Animated.event(\n          [\n            {\n              nativeEvent:\n                gestureDirection === 'vertical' ||\n                gestureDirection === 'vertical-inverted'\n                  ? { translationY: gesture }\n                  : { translationX: gesture },\n            },\n          ],\n          { useNativeDriver }\n        )\n      : undefined;\n\n    const { backgroundColor } = StyleSheet.flatten(contentStyle || {});\n    const isTransparent =\n      typeof backgroundColor === 'string'\n        ? Color(backgroundColor).alpha() === 0\n        : false;\n\n    return (\n      <CardAnimationContext.Provider value={interpolationProps}>\n        {\n          // StatusBar messes with translucent status bar on Android\n          // So we should only enable it on iOS\n          Platform.OS === 'ios' &&\n          overlayEnabled &&\n          next &&\n          getIsModalPresentation(styleInterpolator) ? (\n            <ModalStatusBarManager\n              dark={headerDarkContent}\n              layout={layout}\n              insets={insets}\n              style={cardStyle}\n            />\n          ) : null\n        }\n        <Animated.View\n          style={{\n            // This is a dummy style that doesn't actually change anything visually.\n            // Animated needs the animated value to be used somewhere, otherwise things don't update properly.\n            // If we disable animations and hide header, it could end up making the value unused.\n            // So we have this dummy style that will always be used regardless of what else changed.\n            opacity: current,\n          }}\n          // Make sure that this view isn't removed. If this view is removed, our style with animated value won't apply\n          collapsable={false}\n        />\n        <View pointerEvents=\"box-none\" {...rest}>\n          {overlayEnabled ? (\n            <View pointerEvents=\"box-none\" style={StyleSheet.absoluteFill}>\n              {overlay({ style: overlayStyle })}\n            </View>\n          ) : null}\n          <Animated.View\n            style={[styles.container, containerStyle, customContainerStyle]}\n            pointerEvents=\"box-none\"\n          >\n            <PanGestureHandler\n              enabled={layout.width !== 0 && gestureEnabled}\n              onGestureEvent={handleGestureEvent}\n              onHandlerStateChange={this.handleGestureStateChange}\n              {...this.gestureActivationCriteria()}\n            >\n              <Animated.View\n                needsOffscreenAlphaCompositing={hasOpacityStyle(cardStyle)}\n                style={[styles.container, cardStyle]}\n              >\n                {shadowEnabled && shadowStyle && !isTransparent ? (\n                  <Animated.View\n                    style={[\n                      styles.shadow,\n                      gestureDirection === 'horizontal'\n                        ? [styles.shadowHorizontal, styles.shadowLeft]\n                        : gestureDirection === 'horizontal-inverted'\n                        ? [styles.shadowHorizontal, styles.shadowRight]\n                        : gestureDirection === 'vertical'\n                        ? [styles.shadowVertical, styles.shadowTop]\n                        : [styles.shadowVertical, styles.shadowBottom],\n                      { backgroundColor },\n                      shadowStyle,\n                    ]}\n                    pointerEvents=\"none\"\n                  />\n                ) : null}\n                <CardSheet\n                  ref={this.contentRef}\n                  enabled={pageOverflowEnabled}\n                  layout={layout}\n                  style={contentStyle}\n                >\n                  {children}\n                </CardSheet>\n              </Animated.View>\n            </PanGestureHandler>\n          </Animated.View>\n        </View>\n      </CardAnimationContext.Provider>\n    );\n  }\n}\n\nexport const getIsModalPresentation = (\n  cardStyleInterpolator: StackCardStyleInterpolator\n) => {\n  return (\n    cardStyleInterpolator === forModalPresentationIOS ||\n    // Handle custom modal presentation interpolators as well\n    cardStyleInterpolator.name === 'forModalPresentationIOS'\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  overlay: {\n    flex: 1,\n    backgroundColor: '#000',\n  },\n  shadow: {\n    position: 'absolute',\n    shadowRadius: 5,\n    shadowColor: '#000',\n    shadowOpacity: 0.3,\n  },\n  shadowHorizontal: {\n    top: 0,\n    bottom: 0,\n    width: 3,\n    shadowOffset: { width: -1, height: 1 },\n  },\n  shadowLeft: {\n    left: 0,\n  },\n  shadowRight: {\n    right: 0,\n  },\n  shadowVertical: {\n    left: 0,\n    right: 0,\n    height: 3,\n    shadowOffset: { width: 1, height: -1 },\n  },\n  shadowTop: {\n    top: 0,\n  },\n  shadowBottom: {\n    bottom: 0,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}