{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { getHeaderTitle, HeaderShownContext } from '@react-navigation/elements';\nimport { StackActions } from '@react-navigation/native';\nimport * as React from 'react';\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\nimport debounce from '../../utils/debounce';\nimport ModalPresentationContext from '../../utils/ModalPresentationContext';\nimport HeaderSegment from './HeaderSegment';\nexport default /*#__PURE__*/React.memo(function Header(_ref) {\n  let {\n    back,\n    layout,\n    progress,\n    options,\n    route,\n    navigation,\n    styleInterpolator\n  } = _ref;\n  const insets = useSafeAreaInsets();\n  let previousTitle; // The label for the left back button shows the title of the previous screen\n  // If a custom label is specified, we use it, otherwise use previous screen's title\n\n  if (options.headerBackTitle !== undefined) {\n    previousTitle = options.headerBackTitle;\n  } else if (back) {\n    previousTitle = back.title;\n  } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n\n  const goBack = React.useCallback(debounce(() => {\n    if (navigation.isFocused() && navigation.canGoBack()) {\n      navigation.dispatch({ ...StackActions.pop(),\n        source: route.key\n      });\n    }\n  }, 50), [navigation, route.key]);\n  const isModal = React.useContext(ModalPresentationContext);\n  const isParentHeaderShown = React.useContext(HeaderShownContext);\n  const statusBarHeight = options.headerStatusBarHeight !== undefined ? options.headerStatusBarHeight : isModal || isParentHeaderShown ? 0 : insets.top;\n  return /*#__PURE__*/React.createElement(HeaderSegment, _extends({}, options, {\n    title: getHeaderTitle(options, route.name),\n    progress: progress,\n    layout: layout,\n    modal: isModal,\n    headerBackTitle: options.headerBackTitle !== undefined ? options.headerBackTitle : previousTitle,\n    headerStatusBarHeight: statusBarHeight,\n    onGoBack: back ? goBack : undefined,\n    styleInterpolator: styleInterpolator\n  }));\n});","map":{"version":3,"sources":["Header.tsx"],"names":["styleInterpolator","insets","useSafeAreaInsets","options","previousTitle","back","goBack","debounce","navigation","StackActions","source","route","key","isModal","React","isParentHeaderShown","statusBarHeight","getHeaderTitle"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,SAAA,cAAA,EAAA,kBAAA,QAAA,4BAAA;AACA,SAAA,YAAA,QAAA,0BAAA;AACA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,iBAAA,QAAA,gCAAA;AAGA,OAAA,QAAA,MAAA,sBAAA;AACA,OAAA,wBAAA,MAAA,sCAAA;AACA,OAAA,aAAA,MAAA,iBAAA;AAEA,eAAA,aAAe,KAAK,CAAL,IAAA,CAAW,SAAA,MAAA,OAQL;AAAA,MARqB;AAAA,IAAA,IAAA;AAAA,IAAA,MAAA;AAAA,IAAA,QAAA;AAAA,IAAA,OAAA;AAAA,IAAA,KAAA;AAAA,IAAA,UAAA;AAOxCA,IAAAA;AAPwC,GAQrB;AACnB,QAAMC,MAAM,GAAGC,iBAAf,EAAA;AAEA,MAHmB,aAGnB,CAHmB,CAKnB;AACA;;AACA,MAAIC,OAAO,CAAPA,eAAAA,KAAJ,SAAA,EAA2C;AACzCC,IAAAA,aAAa,GAAGD,OAAO,CAAvBC,eAAAA;AADF,GAAA,MAEO,IAAA,IAAA,EAAU;AACfA,IAAAA,aAAa,GAAGC,IAAI,CAApBD,KAAAA;AAViB,GAAA,CAanB;;;AACA,QAAME,MAAM,GAAG,KAAK,CAAL,WAAA,CACbC,QAAQ,CAAC,MAAM;AACb,QAAIC,UAAU,CAAVA,SAAAA,MAA0BA,UAAU,CAAxC,SAA8BA,EAA9B,EAAsD;AACpDA,MAAAA,UAAU,CAAVA,QAAAA,CAAoB,EAClB,GAAGC,YAAY,CADG,GACfA,EADe;AAElBC,QAAAA,MAAM,EAAEC,KAAK,CAACC;AAFI,OAApBJ;AAID;AANK,GAAA,EADK,EACL,CADK,EASb,CAAA,UAAA,EAAaG,KAAK,CATpB,GASE,CATa,CAAf;AAYA,QAAME,OAAO,GAAGC,KAAK,CAALA,UAAAA,CAAhB,wBAAgBA,CAAhB;AACA,QAAMC,mBAAmB,GAAGD,KAAK,CAALA,UAAAA,CAA5B,kBAA4BA,CAA5B;AAEA,QAAME,eAAe,GACnBb,OAAO,CAAPA,qBAAAA,KAAAA,SAAAA,GACIA,OAAO,CADXA,qBAAAA,GAEIU,OAAO,IAAPA,mBAAAA,GAAAA,CAAAA,GAEAZ,MAAM,CALZ,GAAA;AAOA,SAAA,aACE,KAAA,CAAA,aAAA,CAAA,aAAA,EAAA,QAAA,CAAA,EAAA,EAAA,OAAA,EAAA;AAEE,IAAA,KAAK,EAAEgB,cAAc,CAAA,OAAA,EAAUN,KAAK,CAFtC,IAEuB,CAFvB;AAGE,IAAA,QAAQ,EAHV,QAAA;AAIE,IAAA,MAAM,EAJR,MAAA;AAKE,IAAA,KAAK,EALP,OAAA;AAME,IAAA,eAAe,EACbR,OAAO,CAAPA,eAAAA,KAAAA,SAAAA,GACIA,OAAO,CADXA,eAAAA,GAPJ,aAAA;AAWE,IAAA,qBAAqB,EAXvB,eAAA;AAYE,IAAA,QAAQ,EAAEE,IAAI,GAAA,MAAA,GAZhB,SAAA;AAaE,IAAA,iBAAiB,EAAEL;AAbrB,GAAA,CAAA,CADF;AA5CF,CAAe,CAAf","sourcesContent":["import { getHeaderTitle, HeaderShownContext } from '@react-navigation/elements';\nimport { StackActions } from '@react-navigation/native';\nimport * as React from 'react';\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\n\nimport type { StackHeaderProps } from '../../types';\nimport debounce from '../../utils/debounce';\nimport ModalPresentationContext from '../../utils/ModalPresentationContext';\nimport HeaderSegment from './HeaderSegment';\n\nexport default React.memo(function Header({\n  back,\n  layout,\n  progress,\n  options,\n  route,\n  navigation,\n  styleInterpolator,\n}: StackHeaderProps) {\n  const insets = useSafeAreaInsets();\n\n  let previousTitle;\n\n  // The label for the left back button shows the title of the previous screen\n  // If a custom label is specified, we use it, otherwise use previous screen's title\n  if (options.headerBackTitle !== undefined) {\n    previousTitle = options.headerBackTitle;\n  } else if (back) {\n    previousTitle = back.title;\n  }\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const goBack = React.useCallback(\n    debounce(() => {\n      if (navigation.isFocused() && navigation.canGoBack()) {\n        navigation.dispatch({\n          ...StackActions.pop(),\n          source: route.key,\n        });\n      }\n    }, 50),\n    [navigation, route.key]\n  );\n\n  const isModal = React.useContext(ModalPresentationContext);\n  const isParentHeaderShown = React.useContext(HeaderShownContext);\n\n  const statusBarHeight =\n    options.headerStatusBarHeight !== undefined\n      ? options.headerStatusBarHeight\n      : isModal || isParentHeaderShown\n      ? 0\n      : insets.top;\n\n  return (\n    <HeaderSegment\n      {...options}\n      title={getHeaderTitle(options, route.name)}\n      progress={progress}\n      layout={layout}\n      modal={isModal}\n      headerBackTitle={\n        options.headerBackTitle !== undefined\n          ? options.headerBackTitle\n          : previousTitle\n      }\n      headerStatusBarHeight={statusBarHeight}\n      onGoBack={back ? goBack : undefined}\n      styleInterpolator={styleInterpolator}\n    />\n  );\n});\n"]},"metadata":{},"sourceType":"module"}