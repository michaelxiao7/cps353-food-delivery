{"ast":null,"code":"import { useTheme } from '@react-navigation/native';\nimport * as React from 'react';\nimport { StatusBar, StyleSheet } from 'react-native';\nexport default function ModalStatusBarManager(_ref) {\n  let {\n    dark,\n    layout,\n    insets,\n    style\n  } = _ref;\n\n  var _flattenedStyle$trans, _flattenedStyle$trans2;\n\n  const {\n    dark: darkTheme\n  } = useTheme();\n  const [overlapping, setOverlapping] = React.useState(true);\n  const scale = 1 - 20 / layout.width;\n  const offset = (insets.top - 34) * scale;\n  const flattenedStyle = StyleSheet.flatten(style);\n  const translateY = flattenedStyle === null || flattenedStyle === void 0 ? void 0 : (_flattenedStyle$trans = flattenedStyle.transform) === null || _flattenedStyle$trans === void 0 ? void 0 : (_flattenedStyle$trans2 = _flattenedStyle$trans.find(s => s.translateY !== undefined)) === null || _flattenedStyle$trans2 === void 0 ? void 0 : _flattenedStyle$trans2.translateY;\n  React.useEffect(() => {\n    const listener = _ref2 => {\n      let {\n        value\n      } = _ref2;\n      setOverlapping(value < offset);\n    };\n\n    const sub = translateY === null || translateY === void 0 ? void 0 : translateY.addListener(listener);\n    return () => translateY === null || translateY === void 0 ? void 0 : translateY.removeListener(sub);\n  }, [offset, translateY]);\n  const darkContent = dark !== null && dark !== void 0 ? dark : !darkTheme;\n  return /*#__PURE__*/React.createElement(StatusBar, {\n    animated: true,\n    barStyle: overlapping && darkContent ? 'dark-content' : 'light-content'\n  });\n}","map":{"version":3,"sources":["ModalStatusBarManager.tsx"],"names":["style","dark","darkTheme","useTheme","React","scale","layout","offset","insets","flattenedStyle","StyleSheet","translateY","s","listener","value","setOverlapping","sub","darkContent","overlapping"],"mappings":"AAAA,SAAA,QAAA,QAAA,0BAAA;AACA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,SAAA,EAAA,UAAA,QAAA,cAAA;AAYA,eAAe,SAAA,qBAAA,OAKL;AAAA,MALoC;AAAA,IAAA,IAAA;AAAA,IAAA,MAAA;AAAA,IAAA,MAAA;AAI5CA,IAAAA;AAJ4C,GAKpC;;AAAA,MAAA,qBAAA,EAAA,sBAAA;;AACR,QAAM;AAAEC,IAAAA,IAAI,EAAEC;AAAR,MAAsBC,QAA5B,EAAA;AACA,QAAM,CAAA,WAAA,EAAA,cAAA,IAAgCC,KAAK,CAALA,QAAAA,CAAtC,IAAsCA,CAAtC;AAEA,QAAMC,KAAK,GAAG,IAAI,KAAKC,MAAM,CAA7B,KAAA;AACA,QAAMC,MAAM,GAAG,CAACC,MAAM,CAANA,GAAAA,GAAD,EAAA,IAAf,KAAA;AAEA,QAAMC,cAAc,GAAGC,UAAU,CAAVA,OAAAA,CAAvB,KAAuBA,CAAvB;AACA,QAAMC,UAAU,GAAGF,cAAH,KAAA,IAAGA,IAAAA,cAAH,KAAA,KAAA,CAAGA,GAAH,KAAA,CAAGA,GAAH,CAAA,qBAAA,GAAGA,cAAc,CAAjB,SAAA,MAAA,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,CAAA,sBAAA,GAAGA,qBAAAA,CAAAA,IAAAA,CAChBG,CAAD,IAAYA,CAAC,CAADA,UAAAA,KADE,SAAGH,CAAH,MAAA,IAAA,IAAA,sBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAGA,sBAAAA,CAAnB,UAAA;AAIAL,EAAAA,KAAK,CAALA,SAAAA,CAAgB,MAAM;AACpB,UAAMS,QAAQ,GAAG,SAAkC;AAAA,UAAjC;AAAEC,QAAAA;AAAF,OAAiC;AACjDC,MAAAA,cAAc,CAACD,KAAK,GAApBC,MAAc,CAAdA;AADF,KAAA;;AAIA,UAAMC,GAAG,GAAGL,UAAH,KAAA,IAAGA,IAAAA,UAAH,KAAA,KAAA,CAAGA,GAAH,KAAA,CAAGA,GAAAA,UAAU,CAAVA,WAAAA,CAAZ,QAAYA,CAAZ;AAEA,WAAO,MAAMA,UAAN,KAAA,IAAMA,IAAAA,UAAN,KAAA,KAAA,CAAMA,GAAN,KAAA,CAAMA,GAAAA,UAAU,CAAVA,cAAAA,CAAb,GAAaA,CAAb;AAPFP,GAAAA,EAQG,CAAA,MAAA,EARHA,UAQG,CARHA;AAUA,QAAMa,WAAW,GAAGhB,IAAH,KAAA,IAAGA,IAAAA,IAAH,KAAA,KAAA,CAAGA,GAAH,IAAGA,GAAQ,CAA5B,SAAA;AAEA,SAAA,aACE,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA;AACE,IAAA,QAAQ,EADV,IAAA;AAEE,IAAA,QAAQ,EAAEiB,WAAW,IAAXA,WAAAA,GAAAA,cAAAA,GAA8C;AAF1D,GAAA,CADF;AAMD","sourcesContent":["import { useTheme } from '@react-navigation/native';\nimport * as React from 'react';\nimport { StatusBar, StyleSheet } from 'react-native';\nimport type { EdgeInsets } from 'react-native-safe-area-context';\n\nimport type { Layout } from '../types';\n\ntype Props = {\n  dark: boolean | undefined;\n  layout: Layout;\n  insets: EdgeInsets;\n  style: any;\n};\n\nexport default function ModalStatusBarManager({\n  dark,\n  layout,\n  insets,\n  style,\n}: Props) {\n  const { dark: darkTheme } = useTheme();\n  const [overlapping, setOverlapping] = React.useState(true);\n\n  const scale = 1 - 20 / layout.width;\n  const offset = (insets.top - 34) * scale;\n\n  const flattenedStyle = StyleSheet.flatten(style);\n  const translateY = flattenedStyle?.transform?.find(\n    (s: any) => s.translateY !== undefined\n  )?.translateY;\n\n  React.useEffect(() => {\n    const listener = ({ value }: { value: number }) => {\n      setOverlapping(value < offset);\n    };\n\n    const sub = translateY?.addListener(listener);\n\n    return () => translateY?.removeListener(sub);\n  }, [offset, translateY]);\n\n  const darkContent = dark ?? !darkTheme;\n\n  return (\n    <StatusBar\n      animated\n      barStyle={overlapping && darkContent ? 'dark-content' : 'light-content'}\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}