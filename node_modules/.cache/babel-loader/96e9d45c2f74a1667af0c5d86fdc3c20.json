{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { Background, getDefaultHeaderHeight, SafeAreaProviderCompat } from '@react-navigation/elements';\nimport Color from 'color';\nimport * as React from 'react';\nimport { Animated, Platform, StyleSheet } from 'react-native';\nimport { forModalPresentationIOS, forNoAnimation as forNoAnimationCard } from '../../TransitionConfigs/CardStyleInterpolators';\nimport { DefaultTransition, ModalFadeTransition, ModalTransition } from '../../TransitionConfigs/TransitionPresets';\nimport getDistanceForDirection from '../../utils/getDistanceForDirection';\nimport { MaybeScreen, MaybeScreenContainer } from '../Screens';\nimport { getIsModalPresentation } from './Card';\nimport CardContainer from './CardContainer';\nconst EPSILON = 0.01;\nconst STATE_INACTIVE = 0;\nconst STATE_TRANSITIONING_OR_BELOW_TOP = 1;\nconst STATE_ON_TOP = 2;\nconst FALLBACK_DESCRIPTOR = Object.freeze({\n  options: {}\n});\n\nconst getInterpolationIndex = (scenes, index) => {\n  const {\n    cardStyleInterpolator\n  } = scenes[index].descriptor.options; // Start from current card and count backwards the number of cards with same interpolation\n\n  let interpolationIndex = 0;\n\n  for (let i = index - 1; i >= 0; i--) {\n    var _scenes$i;\n\n    const cardStyleInterpolatorCurrent = (_scenes$i = scenes[i]) === null || _scenes$i === void 0 ? void 0 : _scenes$i.descriptor.options.cardStyleInterpolator;\n\n    if (cardStyleInterpolatorCurrent !== cardStyleInterpolator) {\n      break;\n    }\n\n    interpolationIndex++;\n  }\n\n  return interpolationIndex;\n};\n\nconst getIsModal = (scene, interpolationIndex, isParentModal) => {\n  if (isParentModal) {\n    return true;\n  }\n\n  const {\n    cardStyleInterpolator\n  } = scene.descriptor.options;\n  const isModalPresentation = getIsModalPresentation(cardStyleInterpolator);\n  const isModal = isModalPresentation && interpolationIndex !== 0;\n  return isModal;\n};\n\nconst getHeaderHeights = (scenes, insets, isParentHeaderShown, isParentModal, layout, previous) => {\n  return scenes.reduce((acc, curr, index) => {\n    const {\n      headerStatusBarHeight = isParentHeaderShown ? 0 : insets.top,\n      headerStyle\n    } = curr.descriptor.options;\n    const style = StyleSheet.flatten(headerStyle || {});\n    const height = typeof style.height === 'number' ? style.height : previous[curr.route.key];\n    const interpolationIndex = getInterpolationIndex(scenes, index);\n    const isModal = getIsModal(curr, interpolationIndex, isParentModal);\n    acc[curr.route.key] = typeof height === 'number' ? height : getDefaultHeaderHeight(layout, isModal, headerStatusBarHeight);\n    return acc;\n  }, {});\n};\n\nconst getDistanceFromOptions = (layout, descriptor) => {\n  const {\n    presentation,\n    gestureDirection = presentation === 'modal' ? ModalTransition.gestureDirection : DefaultTransition.gestureDirection\n  } = (descriptor === null || descriptor === void 0 ? void 0 : descriptor.options) || {};\n  return getDistanceForDirection(layout, gestureDirection);\n};\n\nconst getProgressFromGesture = (gesture, layout, descriptor) => {\n  const distance = getDistanceFromOptions({\n    // Make sure that we have a non-zero distance, otherwise there will be incorrect progress\n    // This causes blank screen on web if it was previously inside container with display: none\n    width: Math.max(1, layout.width),\n    height: Math.max(1, layout.height)\n  }, descriptor);\n\n  if (distance > 0) {\n    return gesture.interpolate({\n      inputRange: [0, distance],\n      outputRange: [1, 0]\n    });\n  }\n\n  return gesture.interpolate({\n    inputRange: [distance, 0],\n    outputRange: [0, 1]\n  });\n};\n\nexport default class CardStack extends React.Component {\n  static getDerivedStateFromProps(props, state) {\n    if (props.routes === state.routes && props.descriptors === state.descriptors) {\n      return null;\n    }\n\n    const gestures = props.routes.reduce((acc, curr) => {\n      const descriptor = props.descriptors[curr.key];\n      const {\n        animationEnabled\n      } = (descriptor === null || descriptor === void 0 ? void 0 : descriptor.options) || {};\n      acc[curr.key] = state.gestures[curr.key] || new Animated.Value(props.openingRouteKeys.includes(curr.key) && animationEnabled !== false ? getDistanceFromOptions(state.layout, descriptor) : 0);\n      return acc;\n    }, {});\n    const scenes = props.routes.map((route, index, self) => {\n      var _descriptor$options$h;\n\n      const previousRoute = self[index - 1];\n      const nextRoute = self[index + 1];\n      const oldScene = state.scenes[index];\n      const currentGesture = gestures[route.key];\n      const previousGesture = previousRoute ? gestures[previousRoute.key] : undefined;\n      const nextGesture = nextRoute ? gestures[nextRoute.key] : undefined;\n      const descriptor = props.descriptors[route.key] || state.descriptors[route.key] || (oldScene ? oldScene.descriptor : FALLBACK_DESCRIPTOR);\n      const nextDescriptor = props.descriptors[nextRoute === null || nextRoute === void 0 ? void 0 : nextRoute.key] || state.descriptors[nextRoute === null || nextRoute === void 0 ? void 0 : nextRoute.key];\n      const previousDescriptor = props.descriptors[previousRoute === null || previousRoute === void 0 ? void 0 : previousRoute.key] || state.descriptors[previousRoute === null || previousRoute === void 0 ? void 0 : previousRoute.key]; // When a screen is not the last, it should use next screen's transition config\n      // Many transitions also animate the previous screen, so using 2 different transitions doesn't look right\n      // For example combining a slide and a modal transition would look wrong otherwise\n      // With this approach, combining different transition styles in the same navigator mostly looks right\n      // This will still be broken when 2 transitions have different idle state (e.g. modal presentation),\n      // but majority of the transitions look alright\n\n      const optionsForTransitionConfig = index !== self.length - 1 && nextDescriptor && nextDescriptor.options.presentation !== 'transparentModal' ? nextDescriptor.options : descriptor.options;\n      let defaultTransitionPreset = optionsForTransitionConfig.presentation === 'modal' ? ModalTransition : optionsForTransitionConfig.presentation === 'transparentModal' ? ModalFadeTransition : DefaultTransition;\n      const {\n        animationEnabled = Platform.OS !== 'web' && Platform.OS !== 'windows' && Platform.OS !== 'macos',\n        gestureEnabled = Platform.OS === 'ios' && animationEnabled,\n        gestureDirection = defaultTransitionPreset.gestureDirection,\n        transitionSpec = defaultTransitionPreset.transitionSpec,\n        cardStyleInterpolator = animationEnabled === false ? forNoAnimationCard : defaultTransitionPreset.cardStyleInterpolator,\n        headerStyleInterpolator = defaultTransitionPreset.headerStyleInterpolator,\n        cardOverlayEnabled = Platform.OS !== 'ios' && optionsForTransitionConfig.presentation !== 'transparentModal' || getIsModalPresentation(cardStyleInterpolator)\n      } = optionsForTransitionConfig;\n      const headerMode = (_descriptor$options$h = descriptor.options.headerMode) !== null && _descriptor$options$h !== void 0 ? _descriptor$options$h : !(optionsForTransitionConfig.presentation === 'modal' || optionsForTransitionConfig.presentation === 'transparentModal' || (nextDescriptor === null || nextDescriptor === void 0 ? void 0 : nextDescriptor.options.presentation) === 'modal' || (nextDescriptor === null || nextDescriptor === void 0 ? void 0 : nextDescriptor.options.presentation) === 'transparentModal' || getIsModalPresentation(cardStyleInterpolator)) && Platform.OS === 'ios' && descriptor.options.header === undefined ? 'float' : 'screen';\n      const scene = {\n        route,\n        descriptor: { ...descriptor,\n          options: { ...descriptor.options,\n            animationEnabled,\n            cardOverlayEnabled,\n            cardStyleInterpolator,\n            gestureDirection,\n            gestureEnabled,\n            headerStyleInterpolator,\n            transitionSpec,\n            headerMode\n          }\n        },\n        progress: {\n          current: getProgressFromGesture(currentGesture, state.layout, descriptor),\n          next: nextGesture && (nextDescriptor === null || nextDescriptor === void 0 ? void 0 : nextDescriptor.options.presentation) !== 'transparentModal' ? getProgressFromGesture(nextGesture, state.layout, nextDescriptor) : undefined,\n          previous: previousGesture ? getProgressFromGesture(previousGesture, state.layout, previousDescriptor) : undefined\n        },\n        __memo: [state.layout, descriptor, nextDescriptor, previousDescriptor, currentGesture, nextGesture, previousGesture]\n      };\n\n      if (oldScene && scene.__memo.every((it, i) => {\n        // @ts-expect-error: we haven't added __memo to the annotation to prevent usage elsewhere\n        return oldScene.__memo[i] === it;\n      })) {\n        return oldScene;\n      }\n\n      return scene;\n    });\n    return {\n      routes: props.routes,\n      scenes,\n      gestures,\n      descriptors: props.descriptors,\n      headerHeights: getHeaderHeights(scenes, props.insets, props.isParentHeaderShown, props.isParentModal, state.layout, state.headerHeights)\n    };\n  }\n\n  constructor(_props) {\n    super(_props);\n\n    _defineProperty(this, \"handleLayout\", e => {\n      const {\n        height,\n        width\n      } = e.nativeEvent.layout;\n      const layout = {\n        width,\n        height\n      };\n      this.setState((state, props) => {\n        if (height === state.layout.height && width === state.layout.width) {\n          return null;\n        }\n\n        return {\n          layout,\n          headerHeights: getHeaderHeights(state.scenes, props.insets, props.isParentHeaderShown, props.isParentModal, layout, state.headerHeights)\n        };\n      });\n    });\n\n    _defineProperty(this, \"handleHeaderLayout\", _ref => {\n      let {\n        route,\n        height\n      } = _ref;\n      this.setState(_ref2 => {\n        let {\n          headerHeights\n        } = _ref2;\n        const previousHeight = headerHeights[route.key];\n\n        if (previousHeight === height) {\n          return null;\n        }\n\n        return {\n          headerHeights: { ...headerHeights,\n            [route.key]: height\n          }\n        };\n      });\n    });\n\n    _defineProperty(this, \"getFocusedRoute\", () => {\n      const {\n        state\n      } = this.props;\n      return state.routes[state.index];\n    });\n\n    _defineProperty(this, \"getPreviousScene\", _ref3 => {\n      let {\n        route\n      } = _ref3;\n      const {\n        getPreviousRoute\n      } = this.props;\n      const {\n        scenes\n      } = this.state;\n      const previousRoute = getPreviousRoute({\n        route\n      });\n\n      if (previousRoute) {\n        const previousScene = scenes.find(scene => scene.descriptor.route.key === previousRoute.key);\n        return previousScene;\n      }\n\n      return undefined;\n    });\n\n    this.state = {\n      routes: [],\n      scenes: [],\n      gestures: {},\n      layout: SafeAreaProviderCompat.initialMetrics.frame,\n      descriptors: this.props.descriptors,\n      // Used when card's header is null and mode is float to make transition\n      // between screens with headers and those without headers smooth.\n      // This is not a great heuristic here. We don't know synchronously\n      // on mount what the header height is so we have just used the most\n      // common cases here.\n      headerHeights: {}\n    };\n  }\n\n  render() {\n    const {\n      insets,\n      state,\n      routes,\n      closingRouteKeys,\n      onOpenRoute,\n      onCloseRoute,\n      renderHeader,\n      renderScene,\n      isParentHeaderShown,\n      isParentModal,\n      onTransitionStart,\n      onTransitionEnd,\n      onGestureStart,\n      onGestureEnd,\n      onGestureCancel,\n      detachInactiveScreens = Platform.OS === 'web' || Platform.OS === 'android' || Platform.OS === 'ios'\n    } = this.props;\n    const {\n      scenes,\n      layout,\n      gestures,\n      headerHeights\n    } = this.state;\n    const focusedRoute = state.routes[state.index];\n    const focusedHeaderHeight = headerHeights[focusedRoute.key];\n    const isFloatHeaderAbsolute = this.state.scenes.slice(-2).some(scene => {\n      var _scene$descriptor$opt;\n\n      const options = (_scene$descriptor$opt = scene.descriptor.options) !== null && _scene$descriptor$opt !== void 0 ? _scene$descriptor$opt : {};\n      const {\n        headerMode,\n        headerTransparent,\n        headerShown = true\n      } = options;\n\n      if (headerTransparent || headerShown === false || headerMode === 'screen') {\n        return true;\n      }\n\n      return false;\n    });\n    let activeScreensLimit = 1;\n\n    for (let i = scenes.length - 1; i >= 0; i--) {\n      const {\n        options\n      } = scenes[i].descriptor;\n      const {\n        // By default, we don't want to detach the previous screen of the active one for modals\n        detachPreviousScreen = options.presentation === 'transparentModal' ? false : getIsModalPresentation(options.cardStyleInterpolator) ? i !== scenes.map(scene => scene.descriptor.options.cardStyleInterpolator).lastIndexOf(forModalPresentationIOS) : true\n      } = options;\n\n      if (detachPreviousScreen === false) {\n        activeScreensLimit++;\n      } else {\n        break;\n      }\n    }\n\n    const floatingHeader = /*#__PURE__*/React.createElement(React.Fragment, {\n      key: \"header\"\n    }, renderHeader({\n      mode: 'float',\n      layout,\n      scenes,\n      getPreviousScene: this.getPreviousScene,\n      getFocusedRoute: this.getFocusedRoute,\n      onContentHeightChange: this.handleHeaderLayout,\n      style: [styles.floating, isFloatHeaderAbsolute && [// Without this, the header buttons won't be touchable on Android when headerTransparent: true\n      {\n        height: focusedHeaderHeight\n      }, styles.absolute]]\n    }));\n    return /*#__PURE__*/React.createElement(Background, null, isFloatHeaderAbsolute ? null : floatingHeader, /*#__PURE__*/React.createElement(MaybeScreenContainer, {\n      enabled: detachInactiveScreens,\n      style: styles.container,\n      onLayout: this.handleLayout\n    }, routes.map((route, index, self) => {\n      var _scenes, _scenes2;\n\n      const focused = focusedRoute.key === route.key;\n      const gesture = gestures[route.key];\n      const scene = scenes[index]; // For the screens that shouldn't be active, the value is 0\n      // For those that should be active, but are not the top screen, the value is 1\n      // For those on top of the stack and with interaction enabled, the value is 2\n      // For the old implementation, it stays the same it was\n\n      let isScreenActive = 1;\n\n      if (index < self.length - activeScreensLimit - 1) {\n        // screen should be inactive because it is too deep in the stack\n        isScreenActive = STATE_INACTIVE;\n      } else {\n        const sceneForActivity = scenes[self.length - 1];\n        const outputValue = index === self.length - 1 ? STATE_ON_TOP // the screen is on top after the transition\n        : index >= self.length - activeScreensLimit ? STATE_TRANSITIONING_OR_BELOW_TOP // the screen should stay active after the transition, it is not on top but is in activeLimit\n        : STATE_INACTIVE; // the screen should be active only during the transition, it is at the edge of activeLimit\n\n        isScreenActive = sceneForActivity ? sceneForActivity.progress.current.interpolate({\n          inputRange: [0, 1 - EPSILON, 1],\n          outputRange: [1, 1, outputValue],\n          extrapolate: 'clamp'\n        }) : STATE_TRANSITIONING_OR_BELOW_TOP;\n      }\n\n      const {\n        headerShown = true,\n        headerTransparent,\n        headerStyle,\n        headerTintColor\n      } = scene.descriptor.options;\n      const safeAreaInsetTop = insets.top;\n      const safeAreaInsetRight = insets.right;\n      const safeAreaInsetBottom = insets.bottom;\n      const safeAreaInsetLeft = insets.left;\n      const headerHeight = headerShown !== false ? headerHeights[route.key] : 0;\n      const {\n        backgroundColor: headerBackgroundColor\n      } = StyleSheet.flatten(headerStyle) || {};\n      let headerDarkContent;\n\n      if (headerShown) {\n        if (typeof headerTintColor === 'string') {\n          headerDarkContent = Color(headerTintColor).isDark();\n        } else if (typeof headerBackgroundColor === 'string') {\n          headerDarkContent = !Color(headerBackgroundColor).isDark();\n        }\n      } // Start from current card and count backwards the number of cards with same interpolation\n\n\n      const interpolationIndex = getInterpolationIndex(scenes, index);\n      const isModal = getIsModal(scene, interpolationIndex, isParentModal);\n      const isNextScreenTransparent = ((_scenes = scenes[index + 1]) === null || _scenes === void 0 ? void 0 : _scenes.descriptor.options.presentation) === 'transparentModal';\n      const detachCurrentScreen = ((_scenes2 = scenes[index + 1]) === null || _scenes2 === void 0 ? void 0 : _scenes2.descriptor.options.detachPreviousScreen) !== false;\n      return /*#__PURE__*/React.createElement(MaybeScreen, {\n        key: route.key,\n        style: StyleSheet.absoluteFill,\n        enabled: detachInactiveScreens,\n        active: isScreenActive,\n        pointerEvents: \"box-none\"\n      }, /*#__PURE__*/React.createElement(CardContainer, {\n        index: index,\n        interpolationIndex: interpolationIndex,\n        modal: isModal,\n        active: index === self.length - 1,\n        focused: focused,\n        closing: closingRouteKeys.includes(route.key),\n        layout: layout,\n        gesture: gesture,\n        scene: scene,\n        safeAreaInsetTop: safeAreaInsetTop,\n        safeAreaInsetRight: safeAreaInsetRight,\n        safeAreaInsetBottom: safeAreaInsetBottom,\n        safeAreaInsetLeft: safeAreaInsetLeft,\n        onGestureStart: onGestureStart,\n        onGestureCancel: onGestureCancel,\n        onGestureEnd: onGestureEnd,\n        headerHeight: headerHeight,\n        isParentHeaderShown: isParentHeaderShown,\n        onHeaderHeightChange: this.handleHeaderLayout,\n        getPreviousScene: this.getPreviousScene,\n        getFocusedRoute: this.getFocusedRoute,\n        headerDarkContent: headerDarkContent,\n        hasAbsoluteFloatHeader: isFloatHeaderAbsolute && !headerTransparent,\n        renderHeader: renderHeader,\n        renderScene: renderScene,\n        onOpenRoute: onOpenRoute,\n        onCloseRoute: onCloseRoute,\n        onTransitionStart: onTransitionStart,\n        onTransitionEnd: onTransitionEnd,\n        isNextScreenTransparent: isNextScreenTransparent,\n        detachCurrentScreen: detachCurrentScreen\n      }));\n    })), isFloatHeaderAbsolute ? floatingHeader : null);\n  }\n\n}\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  absolute: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0\n  },\n  floating: {\n    zIndex: 1\n  }\n});","map":{"version":3,"sources":["CardStack.tsx"],"names":["forNoAnimation","EPSILON","STATE_INACTIVE","STATE_TRANSITIONING_OR_BELOW_TOP","STATE_ON_TOP","FALLBACK_DESCRIPTOR","options","getInterpolationIndex","cardStyleInterpolator","scenes","interpolationIndex","i","index","cardStyleInterpolatorCurrent","getIsModal","scene","isModalPresentation","getIsModalPresentation","isModal","getHeaderHeights","headerStatusBarHeight","isParentHeaderShown","insets","headerStyle","curr","style","StyleSheet","height","previous","acc","getDefaultHeaderHeight","getDistanceFromOptions","gestureDirection","presentation","ModalTransition","DefaultTransition","getDistanceForDirection","getProgressFromGesture","distance","width","Math","layout","inputRange","outputRange","React","getDerivedStateFromProps","props","state","gestures","descriptor","animationEnabled","Animated","previousRoute","self","nextRoute","oldScene","currentGesture","route","previousGesture","nextGesture","nextDescriptor","previousDescriptor","optionsForTransitionConfig","defaultTransitionPreset","Platform","gestureEnabled","transitionSpec","headerStyleInterpolator","cardOverlayEnabled","headerMode","progress","current","next","undefined","__memo","routes","descriptors","headerHeights","constructor","SafeAreaProviderCompat","e","previousHeight","getPreviousRoute","previousScene","render","detachInactiveScreens","focusedRoute","focusedHeaderHeight","isFloatHeaderAbsolute","headerShown","headerTransparent","activeScreensLimit","detachPreviousScreen","floatingHeader","renderHeader","mode","getPreviousScene","getFocusedRoute","onContentHeightChange","styles","handleLayout","focused","gesture","isScreenActive","sceneForActivity","outputValue","extrapolate","headerTintColor","safeAreaInsetTop","safeAreaInsetRight","safeAreaInsetBottom","safeAreaInsetLeft","headerHeight","backgroundColor","headerBackgroundColor","headerDarkContent","Color","isNextScreenTransparent","detachCurrentScreen","closingRouteKeys","container","flex","absolute","position","top","left","right","floating","zIndex"],"mappings":"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","sourcesContent":["import {\n  Background,\n  getDefaultHeaderHeight,\n  SafeAreaProviderCompat,\n} from '@react-navigation/elements';\nimport type {\n  ParamListBase,\n  Route,\n  StackNavigationState,\n} from '@react-navigation/native';\nimport Color from 'color';\nimport * as React from 'react';\nimport {\n  Animated,\n  LayoutChangeEvent,\n  Platform,\n  StyleSheet,\n} from 'react-native';\nimport type { EdgeInsets } from 'react-native-safe-area-context';\n\nimport {\n  forModalPresentationIOS,\n  forNoAnimation as forNoAnimationCard,\n} from '../../TransitionConfigs/CardStyleInterpolators';\nimport {\n  DefaultTransition,\n  ModalFadeTransition,\n  ModalTransition,\n} from '../../TransitionConfigs/TransitionPresets';\nimport type {\n  Layout,\n  Scene,\n  StackDescriptor,\n  StackDescriptorMap,\n  StackHeaderMode,\n  StackNavigationOptions,\n} from '../../types';\nimport getDistanceForDirection from '../../utils/getDistanceForDirection';\nimport type { Props as HeaderContainerProps } from '../Header/HeaderContainer';\nimport { MaybeScreen, MaybeScreenContainer } from '../Screens';\nimport { getIsModalPresentation } from './Card';\nimport CardContainer from './CardContainer';\n\ntype GestureValues = {\n  [key: string]: Animated.Value;\n};\n\ntype Props = {\n  insets: EdgeInsets;\n  state: StackNavigationState<ParamListBase>;\n  descriptors: StackDescriptorMap;\n  routes: Route<string>[];\n  openingRouteKeys: string[];\n  closingRouteKeys: string[];\n  onOpenRoute: (props: { route: Route<string> }) => void;\n  onCloseRoute: (props: { route: Route<string> }) => void;\n  getPreviousRoute: (props: {\n    route: Route<string>;\n  }) => Route<string> | undefined;\n  renderHeader: (props: HeaderContainerProps) => React.ReactNode;\n  renderScene: (props: { route: Route<string> }) => React.ReactNode;\n  isParentHeaderShown: boolean;\n  isParentModal: boolean;\n  onTransitionStart: (\n    props: { route: Route<string> },\n    closing: boolean\n  ) => void;\n  onTransitionEnd: (props: { route: Route<string> }, closing: boolean) => void;\n  onGestureStart: (props: { route: Route<string> }) => void;\n  onGestureEnd: (props: { route: Route<string> }) => void;\n  onGestureCancel: (props: { route: Route<string> }) => void;\n  detachInactiveScreens?: boolean;\n};\n\ntype State = {\n  routes: Route<string>[];\n  descriptors: StackDescriptorMap;\n  scenes: Scene[];\n  gestures: GestureValues;\n  layout: Layout;\n  headerHeights: Record<string, number>;\n};\n\nconst EPSILON = 0.01;\n\nconst STATE_INACTIVE = 0;\nconst STATE_TRANSITIONING_OR_BELOW_TOP = 1;\nconst STATE_ON_TOP = 2;\n\nconst FALLBACK_DESCRIPTOR = Object.freeze({ options: {} });\n\nconst getInterpolationIndex = (scenes: Scene[], index: number) => {\n  const { cardStyleInterpolator } = scenes[index].descriptor.options;\n\n  // Start from current card and count backwards the number of cards with same interpolation\n  let interpolationIndex = 0;\n\n  for (let i = index - 1; i >= 0; i--) {\n    const cardStyleInterpolatorCurrent =\n      scenes[i]?.descriptor.options.cardStyleInterpolator;\n\n    if (cardStyleInterpolatorCurrent !== cardStyleInterpolator) {\n      break;\n    }\n\n    interpolationIndex++;\n  }\n\n  return interpolationIndex;\n};\n\nconst getIsModal = (\n  scene: Scene,\n  interpolationIndex: number,\n  isParentModal: boolean\n) => {\n  if (isParentModal) {\n    return true;\n  }\n\n  const { cardStyleInterpolator } = scene.descriptor.options;\n  const isModalPresentation = getIsModalPresentation(cardStyleInterpolator);\n  const isModal = isModalPresentation && interpolationIndex !== 0;\n\n  return isModal;\n};\n\nconst getHeaderHeights = (\n  scenes: Scene[],\n  insets: EdgeInsets,\n  isParentHeaderShown: boolean,\n  isParentModal: boolean,\n  layout: Layout,\n  previous: Record<string, number>\n) => {\n  return scenes.reduce<Record<string, number>>((acc, curr, index) => {\n    const {\n      headerStatusBarHeight = isParentHeaderShown ? 0 : insets.top,\n      headerStyle,\n    } = curr.descriptor.options;\n\n    const style = StyleSheet.flatten(headerStyle || {});\n\n    const height =\n      typeof style.height === 'number'\n        ? style.height\n        : previous[curr.route.key];\n\n    const interpolationIndex = getInterpolationIndex(scenes, index);\n    const isModal = getIsModal(curr, interpolationIndex, isParentModal);\n\n    acc[curr.route.key] =\n      typeof height === 'number'\n        ? height\n        : getDefaultHeaderHeight(layout, isModal, headerStatusBarHeight);\n\n    return acc;\n  }, {});\n};\n\nconst getDistanceFromOptions = (\n  layout: Layout,\n  descriptor?: StackDescriptor\n) => {\n  const {\n    presentation,\n    gestureDirection = presentation === 'modal'\n      ? ModalTransition.gestureDirection\n      : DefaultTransition.gestureDirection,\n  } = (descriptor?.options || {}) as StackNavigationOptions;\n\n  return getDistanceForDirection(layout, gestureDirection);\n};\n\nconst getProgressFromGesture = (\n  gesture: Animated.Value,\n  layout: Layout,\n  descriptor?: StackDescriptor\n) => {\n  const distance = getDistanceFromOptions(\n    {\n      // Make sure that we have a non-zero distance, otherwise there will be incorrect progress\n      // This causes blank screen on web if it was previously inside container with display: none\n      width: Math.max(1, layout.width),\n      height: Math.max(1, layout.height),\n    },\n    descriptor\n  );\n\n  if (distance > 0) {\n    return gesture.interpolate({\n      inputRange: [0, distance],\n      outputRange: [1, 0],\n    });\n  }\n\n  return gesture.interpolate({\n    inputRange: [distance, 0],\n    outputRange: [0, 1],\n  });\n};\n\nexport default class CardStack extends React.Component<Props, State> {\n  static getDerivedStateFromProps(\n    props: Props,\n    state: State\n  ): Partial<State> | null {\n    if (\n      props.routes === state.routes &&\n      props.descriptors === state.descriptors\n    ) {\n      return null;\n    }\n\n    const gestures = props.routes.reduce<GestureValues>((acc, curr) => {\n      const descriptor = props.descriptors[curr.key];\n      const { animationEnabled } = descriptor?.options || {};\n\n      acc[curr.key] =\n        state.gestures[curr.key] ||\n        new Animated.Value(\n          props.openingRouteKeys.includes(curr.key) &&\n          animationEnabled !== false\n            ? getDistanceFromOptions(state.layout, descriptor)\n            : 0\n        );\n\n      return acc;\n    }, {});\n\n    const scenes = props.routes.map((route, index, self) => {\n      const previousRoute = self[index - 1];\n      const nextRoute = self[index + 1];\n\n      const oldScene = state.scenes[index];\n\n      const currentGesture = gestures[route.key];\n      const previousGesture = previousRoute\n        ? gestures[previousRoute.key]\n        : undefined;\n      const nextGesture = nextRoute ? gestures[nextRoute.key] : undefined;\n\n      const descriptor =\n        props.descriptors[route.key] ||\n        state.descriptors[route.key] ||\n        (oldScene ? oldScene.descriptor : FALLBACK_DESCRIPTOR);\n\n      const nextDescriptor =\n        props.descriptors[nextRoute?.key] || state.descriptors[nextRoute?.key];\n\n      const previousDescriptor =\n        props.descriptors[previousRoute?.key] ||\n        state.descriptors[previousRoute?.key];\n\n      // When a screen is not the last, it should use next screen's transition config\n      // Many transitions also animate the previous screen, so using 2 different transitions doesn't look right\n      // For example combining a slide and a modal transition would look wrong otherwise\n      // With this approach, combining different transition styles in the same navigator mostly looks right\n      // This will still be broken when 2 transitions have different idle state (e.g. modal presentation),\n      // but majority of the transitions look alright\n      const optionsForTransitionConfig =\n        index !== self.length - 1 &&\n        nextDescriptor &&\n        nextDescriptor.options.presentation !== 'transparentModal'\n          ? nextDescriptor.options\n          : descriptor.options;\n\n      let defaultTransitionPreset =\n        optionsForTransitionConfig.presentation === 'modal'\n          ? ModalTransition\n          : optionsForTransitionConfig.presentation === 'transparentModal'\n          ? ModalFadeTransition\n          : DefaultTransition;\n\n      const {\n        animationEnabled = Platform.OS !== 'web' &&\n          Platform.OS !== 'windows' &&\n          Platform.OS !== 'macos',\n        gestureEnabled = Platform.OS === 'ios' && animationEnabled,\n        gestureDirection = defaultTransitionPreset.gestureDirection,\n        transitionSpec = defaultTransitionPreset.transitionSpec,\n        cardStyleInterpolator = animationEnabled === false\n          ? forNoAnimationCard\n          : defaultTransitionPreset.cardStyleInterpolator,\n        headerStyleInterpolator = defaultTransitionPreset.headerStyleInterpolator,\n        cardOverlayEnabled = (Platform.OS !== 'ios' &&\n          optionsForTransitionConfig.presentation !== 'transparentModal') ||\n          getIsModalPresentation(cardStyleInterpolator),\n      } = optionsForTransitionConfig;\n\n      const headerMode: StackHeaderMode =\n        descriptor.options.headerMode ??\n        (!(\n          optionsForTransitionConfig.presentation === 'modal' ||\n          optionsForTransitionConfig.presentation === 'transparentModal' ||\n          nextDescriptor?.options.presentation === 'modal' ||\n          nextDescriptor?.options.presentation === 'transparentModal' ||\n          getIsModalPresentation(cardStyleInterpolator)\n        ) &&\n        Platform.OS === 'ios' &&\n        descriptor.options.header === undefined\n          ? 'float'\n          : 'screen');\n\n      const scene = {\n        route,\n        descriptor: {\n          ...descriptor,\n          options: {\n            ...descriptor.options,\n            animationEnabled,\n            cardOverlayEnabled,\n            cardStyleInterpolator,\n            gestureDirection,\n            gestureEnabled,\n            headerStyleInterpolator,\n            transitionSpec,\n            headerMode,\n          },\n        },\n        progress: {\n          current: getProgressFromGesture(\n            currentGesture,\n            state.layout,\n            descriptor\n          ),\n          next:\n            nextGesture &&\n            nextDescriptor?.options.presentation !== 'transparentModal'\n              ? getProgressFromGesture(\n                  nextGesture,\n                  state.layout,\n                  nextDescriptor\n                )\n              : undefined,\n          previous: previousGesture\n            ? getProgressFromGesture(\n                previousGesture,\n                state.layout,\n                previousDescriptor\n              )\n            : undefined,\n        },\n        __memo: [\n          state.layout,\n          descriptor,\n          nextDescriptor,\n          previousDescriptor,\n          currentGesture,\n          nextGesture,\n          previousGesture,\n        ],\n      };\n\n      if (\n        oldScene &&\n        scene.__memo.every((it, i) => {\n          // @ts-expect-error: we haven't added __memo to the annotation to prevent usage elsewhere\n          return oldScene.__memo[i] === it;\n        })\n      ) {\n        return oldScene;\n      }\n\n      return scene;\n    });\n\n    return {\n      routes: props.routes,\n      scenes,\n      gestures,\n      descriptors: props.descriptors,\n      headerHeights: getHeaderHeights(\n        scenes,\n        props.insets,\n        props.isParentHeaderShown,\n        props.isParentModal,\n        state.layout,\n        state.headerHeights\n      ),\n    };\n  }\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      routes: [],\n      scenes: [],\n      gestures: {},\n      layout: SafeAreaProviderCompat.initialMetrics.frame,\n      descriptors: this.props.descriptors,\n      // Used when card's header is null and mode is float to make transition\n      // between screens with headers and those without headers smooth.\n      // This is not a great heuristic here. We don't know synchronously\n      // on mount what the header height is so we have just used the most\n      // common cases here.\n      headerHeights: {},\n    };\n  }\n\n  private handleLayout = (e: LayoutChangeEvent) => {\n    const { height, width } = e.nativeEvent.layout;\n\n    const layout = { width, height };\n\n    this.setState((state, props) => {\n      if (height === state.layout.height && width === state.layout.width) {\n        return null;\n      }\n\n      return {\n        layout,\n        headerHeights: getHeaderHeights(\n          state.scenes,\n          props.insets,\n          props.isParentHeaderShown,\n          props.isParentModal,\n          layout,\n          state.headerHeights\n        ),\n      };\n    });\n  };\n\n  private handleHeaderLayout = ({\n    route,\n    height,\n  }: {\n    route: Route<string>;\n    height: number;\n  }) => {\n    this.setState(({ headerHeights }) => {\n      const previousHeight = headerHeights[route.key];\n\n      if (previousHeight === height) {\n        return null;\n      }\n\n      return {\n        headerHeights: {\n          ...headerHeights,\n          [route.key]: height,\n        },\n      };\n    });\n  };\n\n  private getFocusedRoute = () => {\n    const { state } = this.props;\n\n    return state.routes[state.index];\n  };\n\n  private getPreviousScene = ({ route }: { route: Route<string> }) => {\n    const { getPreviousRoute } = this.props;\n    const { scenes } = this.state;\n\n    const previousRoute = getPreviousRoute({ route });\n\n    if (previousRoute) {\n      const previousScene = scenes.find(\n        (scene) => scene.descriptor.route.key === previousRoute.key\n      );\n\n      return previousScene;\n    }\n\n    return undefined;\n  };\n\n  render() {\n    const {\n      insets,\n      state,\n      routes,\n      closingRouteKeys,\n      onOpenRoute,\n      onCloseRoute,\n      renderHeader,\n      renderScene,\n      isParentHeaderShown,\n      isParentModal,\n      onTransitionStart,\n      onTransitionEnd,\n      onGestureStart,\n      onGestureEnd,\n      onGestureCancel,\n      detachInactiveScreens = Platform.OS === 'web' ||\n        Platform.OS === 'android' ||\n        Platform.OS === 'ios',\n    } = this.props;\n\n    const { scenes, layout, gestures, headerHeights } = this.state;\n\n    const focusedRoute = state.routes[state.index];\n    const focusedHeaderHeight = headerHeights[focusedRoute.key];\n\n    const isFloatHeaderAbsolute = this.state.scenes.slice(-2).some((scene) => {\n      const options = scene.descriptor.options ?? {};\n      const { headerMode, headerTransparent, headerShown = true } = options;\n\n      if (\n        headerTransparent ||\n        headerShown === false ||\n        headerMode === 'screen'\n      ) {\n        return true;\n      }\n\n      return false;\n    });\n\n    let activeScreensLimit = 1;\n\n    for (let i = scenes.length - 1; i >= 0; i--) {\n      const { options } = scenes[i].descriptor;\n      const {\n        // By default, we don't want to detach the previous screen of the active one for modals\n        detachPreviousScreen = options.presentation === 'transparentModal'\n          ? false\n          : getIsModalPresentation(options.cardStyleInterpolator)\n          ? i !==\n            scenes\n              .map((scene) => scene.descriptor.options.cardStyleInterpolator)\n              .lastIndexOf(forModalPresentationIOS)\n          : true,\n      } = options;\n\n      if (detachPreviousScreen === false) {\n        activeScreensLimit++;\n      } else {\n        break;\n      }\n    }\n\n    const floatingHeader = (\n      <React.Fragment key=\"header\">\n        {renderHeader({\n          mode: 'float',\n          layout,\n          scenes,\n          getPreviousScene: this.getPreviousScene,\n          getFocusedRoute: this.getFocusedRoute,\n          onContentHeightChange: this.handleHeaderLayout,\n          style: [\n            styles.floating,\n            isFloatHeaderAbsolute && [\n              // Without this, the header buttons won't be touchable on Android when headerTransparent: true\n              { height: focusedHeaderHeight },\n              styles.absolute,\n            ],\n          ],\n        })}\n      </React.Fragment>\n    );\n\n    return (\n      <Background>\n        {isFloatHeaderAbsolute ? null : floatingHeader}\n        <MaybeScreenContainer\n          enabled={detachInactiveScreens}\n          style={styles.container}\n          onLayout={this.handleLayout}\n        >\n          {routes.map((route, index, self) => {\n            const focused = focusedRoute.key === route.key;\n            const gesture = gestures[route.key];\n            const scene = scenes[index];\n\n            // For the screens that shouldn't be active, the value is 0\n            // For those that should be active, but are not the top screen, the value is 1\n            // For those on top of the stack and with interaction enabled, the value is 2\n            // For the old implementation, it stays the same it was\n            let isScreenActive: Animated.AnimatedInterpolation | 2 | 1 | 0 = 1;\n\n            if (index < self.length - activeScreensLimit - 1) {\n              // screen should be inactive because it is too deep in the stack\n              isScreenActive = STATE_INACTIVE;\n            } else {\n              const sceneForActivity = scenes[self.length - 1];\n              const outputValue =\n                index === self.length - 1\n                  ? STATE_ON_TOP // the screen is on top after the transition\n                  : index >= self.length - activeScreensLimit\n                  ? STATE_TRANSITIONING_OR_BELOW_TOP // the screen should stay active after the transition, it is not on top but is in activeLimit\n                  : STATE_INACTIVE; // the screen should be active only during the transition, it is at the edge of activeLimit\n              isScreenActive = sceneForActivity\n                ? sceneForActivity.progress.current.interpolate({\n                    inputRange: [0, 1 - EPSILON, 1],\n                    outputRange: [1, 1, outputValue],\n                    extrapolate: 'clamp',\n                  })\n                : STATE_TRANSITIONING_OR_BELOW_TOP;\n            }\n\n            const {\n              headerShown = true,\n              headerTransparent,\n              headerStyle,\n              headerTintColor,\n            } = scene.descriptor.options;\n\n            const safeAreaInsetTop = insets.top;\n            const safeAreaInsetRight = insets.right;\n            const safeAreaInsetBottom = insets.bottom;\n            const safeAreaInsetLeft = insets.left;\n\n            const headerHeight =\n              headerShown !== false ? headerHeights[route.key] : 0;\n\n            const { backgroundColor: headerBackgroundColor } =\n              StyleSheet.flatten(headerStyle) || {};\n\n            let headerDarkContent: boolean | undefined;\n\n            if (headerShown) {\n              if (typeof headerTintColor === 'string') {\n                headerDarkContent = Color(headerTintColor).isDark();\n              } else if (typeof headerBackgroundColor === 'string') {\n                headerDarkContent = !Color(headerBackgroundColor).isDark();\n              }\n            }\n\n            // Start from current card and count backwards the number of cards with same interpolation\n            const interpolationIndex = getInterpolationIndex(scenes, index);\n            const isModal = getIsModal(\n              scene,\n              interpolationIndex,\n              isParentModal\n            );\n\n            const isNextScreenTransparent =\n              scenes[index + 1]?.descriptor.options.presentation ===\n              'transparentModal';\n\n            const detachCurrentScreen =\n              scenes[index + 1]?.descriptor.options.detachPreviousScreen !==\n              false;\n\n            return (\n              <MaybeScreen\n                key={route.key}\n                style={StyleSheet.absoluteFill}\n                enabled={detachInactiveScreens}\n                active={isScreenActive}\n                pointerEvents=\"box-none\"\n              >\n                <CardContainer\n                  index={index}\n                  interpolationIndex={interpolationIndex}\n                  modal={isModal}\n                  active={index === self.length - 1}\n                  focused={focused}\n                  closing={closingRouteKeys.includes(route.key)}\n                  layout={layout}\n                  gesture={gesture}\n                  scene={scene}\n                  safeAreaInsetTop={safeAreaInsetTop}\n                  safeAreaInsetRight={safeAreaInsetRight}\n                  safeAreaInsetBottom={safeAreaInsetBottom}\n                  safeAreaInsetLeft={safeAreaInsetLeft}\n                  onGestureStart={onGestureStart}\n                  onGestureCancel={onGestureCancel}\n                  onGestureEnd={onGestureEnd}\n                  headerHeight={headerHeight}\n                  isParentHeaderShown={isParentHeaderShown}\n                  onHeaderHeightChange={this.handleHeaderLayout}\n                  getPreviousScene={this.getPreviousScene}\n                  getFocusedRoute={this.getFocusedRoute}\n                  headerDarkContent={headerDarkContent}\n                  hasAbsoluteFloatHeader={\n                    isFloatHeaderAbsolute && !headerTransparent\n                  }\n                  renderHeader={renderHeader}\n                  renderScene={renderScene}\n                  onOpenRoute={onOpenRoute}\n                  onCloseRoute={onCloseRoute}\n                  onTransitionStart={onTransitionStart}\n                  onTransitionEnd={onTransitionEnd}\n                  isNextScreenTransparent={isNextScreenTransparent}\n                  detachCurrentScreen={detachCurrentScreen}\n                />\n              </MaybeScreen>\n            );\n          })}\n        </MaybeScreenContainer>\n        {isFloatHeaderAbsolute ? floatingHeader : null}\n      </Background>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  absolute: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n  },\n  floating: {\n    zIndex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}