{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { HeaderShownContext, SafeAreaProviderCompat } from '@react-navigation/elements';\nimport { StackActions } from '@react-navigation/native';\nimport * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport { SafeAreaInsetsContext } from 'react-native-safe-area-context';\nimport ModalPresentationContext from '../../utils/ModalPresentationContext';\nimport { GestureHandlerRootView } from '../GestureHandler';\nimport HeaderContainer from '../Header/HeaderContainer';\nimport CardStack from './CardStack';\nconst GestureHandlerWrapper = GestureHandlerRootView !== null && GestureHandlerRootView !== void 0 ? GestureHandlerRootView : View;\n/**\n * Compare two arrays with primitive values as the content.\n * We need to make sure that both values and order match.\n */\n\nconst isArrayEqual = (a, b) => a.length === b.length && a.every((it, index) => it === b[index]);\n\nexport default class StackView extends React.Component {\n  constructor() {\n    super(...arguments);\n\n    _defineProperty(this, \"state\", {\n      routes: [],\n      previousRoutes: [],\n      previousDescriptors: {},\n      openingRouteKeys: [],\n      closingRouteKeys: [],\n      replacingRouteKeys: [],\n      descriptors: {}\n    });\n\n    _defineProperty(this, \"getPreviousRoute\", _ref => {\n      let {\n        route\n      } = _ref;\n      const {\n        closingRouteKeys,\n        replacingRouteKeys\n      } = this.state;\n      const routes = this.state.routes.filter(r => r.key === route.key || !closingRouteKeys.includes(r.key) && !replacingRouteKeys.includes(r.key));\n      const index = routes.findIndex(r => r.key === route.key);\n      return routes[index - 1];\n    });\n\n    _defineProperty(this, \"renderScene\", _ref2 => {\n      let {\n        route\n      } = _ref2;\n      const descriptor = this.state.descriptors[route.key] || this.props.descriptors[route.key];\n\n      if (!descriptor) {\n        return null;\n      }\n\n      return descriptor.render();\n    });\n\n    _defineProperty(this, \"renderHeader\", props => {\n      return /*#__PURE__*/React.createElement(HeaderContainer, props);\n    });\n\n    _defineProperty(this, \"handleOpenRoute\", _ref3 => {\n      let {\n        route\n      } = _ref3;\n      const {\n        state,\n        navigation\n      } = this.props;\n      const {\n        closingRouteKeys,\n        replacingRouteKeys\n      } = this.state;\n\n      if (closingRouteKeys.some(key => key === route.key) && replacingRouteKeys.every(key => key !== route.key) && state.routeNames.includes(route.name) && !state.routes.some(r => r.key === route.key)) {\n        // If route isn't present in current state, but was closing, assume that a close animation was cancelled\n        // So we need to add this route back to the state\n        navigation.navigate(route);\n      } else {\n        this.setState(state => ({\n          routes: state.replacingRouteKeys.length ? state.routes.filter(r => !state.replacingRouteKeys.includes(r.key)) : state.routes,\n          openingRouteKeys: state.openingRouteKeys.filter(key => key !== route.key),\n          closingRouteKeys: state.closingRouteKeys.filter(key => key !== route.key),\n          replacingRouteKeys: []\n        }));\n      }\n    });\n\n    _defineProperty(this, \"handleCloseRoute\", _ref4 => {\n      let {\n        route\n      } = _ref4;\n      const {\n        state,\n        navigation\n      } = this.props;\n\n      if (state.routes.some(r => r.key === route.key)) {\n        // If a route exists in state, trigger a pop\n        // This will happen in when the route was closed from the card component\n        // e.g. When the close animation triggered from a gesture ends\n        navigation.dispatch({ ...StackActions.pop(),\n          source: route.key,\n          target: state.key\n        });\n      } else {\n        // We need to clean up any state tracking the route and pop it immediately\n        this.setState(state => ({\n          routes: state.routes.filter(r => r.key !== route.key),\n          openingRouteKeys: state.openingRouteKeys.filter(key => key !== route.key),\n          closingRouteKeys: state.closingRouteKeys.filter(key => key !== route.key)\n        }));\n      }\n    });\n\n    _defineProperty(this, \"handleTransitionStart\", (_ref5, closing) => {\n      let {\n        route\n      } = _ref5;\n      return this.props.navigation.emit({\n        type: 'transitionStart',\n        data: {\n          closing\n        },\n        target: route.key\n      });\n    });\n\n    _defineProperty(this, \"handleTransitionEnd\", (_ref6, closing) => {\n      let {\n        route\n      } = _ref6;\n      return this.props.navigation.emit({\n        type: 'transitionEnd',\n        data: {\n          closing\n        },\n        target: route.key\n      });\n    });\n\n    _defineProperty(this, \"handleGestureStart\", _ref7 => {\n      let {\n        route\n      } = _ref7;\n      this.props.navigation.emit({\n        type: 'gestureStart',\n        target: route.key\n      });\n    });\n\n    _defineProperty(this, \"handleGestureEnd\", _ref8 => {\n      let {\n        route\n      } = _ref8;\n      this.props.navigation.emit({\n        type: 'gestureEnd',\n        target: route.key\n      });\n    });\n\n    _defineProperty(this, \"handleGestureCancel\", _ref9 => {\n      let {\n        route\n      } = _ref9;\n      this.props.navigation.emit({\n        type: 'gestureCancel',\n        target: route.key\n      });\n    });\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    // If there was no change in routes, we don't need to compute anything\n    if ((props.state.routes === state.previousRoutes || isArrayEqual(props.state.routes.map(r => r.key), state.previousRoutes.map(r => r.key))) && state.routes.length) {\n      let routes = state.routes;\n      let previousRoutes = state.previousRoutes;\n      let descriptors = props.descriptors;\n      let previousDescriptors = state.previousDescriptors;\n\n      if (props.descriptors !== state.previousDescriptors) {\n        descriptors = state.routes.reduce((acc, route) => {\n          acc[route.key] = props.descriptors[route.key] || state.descriptors[route.key];\n          return acc;\n        }, {});\n        previousDescriptors = props.descriptors;\n      }\n\n      if (props.state.routes !== state.previousRoutes) {\n        // if any route objects have changed, we should update them\n        const map = props.state.routes.reduce((acc, route) => {\n          acc[route.key] = route;\n          return acc;\n        }, {});\n        routes = state.routes.map(route => map[route.key] || route);\n        previousRoutes = props.state.routes;\n      }\n\n      return {\n        routes,\n        previousRoutes,\n        descriptors,\n        previousDescriptors\n      };\n    } // Here we determine which routes were added or removed to animate them\n    // We keep a copy of the route being removed in local state to be able to animate it\n\n\n    let routes = props.state.index < props.state.routes.length - 1 ? // Remove any extra routes from the state\n    // The last visible route should be the focused route, i.e. at current index\n    props.state.routes.slice(0, props.state.index + 1) : props.state.routes; // Now we need to determine which routes were added and removed\n\n    let {\n      openingRouteKeys,\n      closingRouteKeys,\n      replacingRouteKeys,\n      previousRoutes\n    } = state;\n    const previousFocusedRoute = previousRoutes[previousRoutes.length - 1];\n    const nextFocusedRoute = routes[routes.length - 1];\n\n    const isAnimationEnabled = key => {\n      const descriptor = props.descriptors[key] || state.descriptors[key];\n      return descriptor ? descriptor.options.animationEnabled !== false : true;\n    };\n\n    const getAnimationTypeForReplace = key => {\n      var _descriptor$options$a;\n\n      const descriptor = props.descriptors[key] || state.descriptors[key];\n      return (_descriptor$options$a = descriptor.options.animationTypeForReplace) !== null && _descriptor$options$a !== void 0 ? _descriptor$options$a : 'push';\n    };\n\n    if (previousFocusedRoute && previousFocusedRoute.key !== nextFocusedRoute.key) {\n      // We only need to animate routes if the focused route changed\n      // Animating previous routes won't be visible coz the focused route is on top of everything\n      if (!previousRoutes.some(r => r.key === nextFocusedRoute.key)) {\n        // A new route has come to the focus, we treat this as a push\n        // A replace can also trigger this, the animation should look like push\n        if (isAnimationEnabled(nextFocusedRoute.key) && !openingRouteKeys.includes(nextFocusedRoute.key)) {\n          // In this case, we need to animate pushing the focused route\n          // We don't care about animating any other added routes because they won't be visible\n          openingRouteKeys = [...openingRouteKeys, nextFocusedRoute.key];\n          closingRouteKeys = closingRouteKeys.filter(key => key !== nextFocusedRoute.key);\n          replacingRouteKeys = replacingRouteKeys.filter(key => key !== nextFocusedRoute.key);\n\n          if (!routes.some(r => r.key === previousFocusedRoute.key)) {\n            // The previous focused route isn't present in state, we treat this as a replace\n            openingRouteKeys = openingRouteKeys.filter(key => key !== previousFocusedRoute.key);\n\n            if (getAnimationTypeForReplace(nextFocusedRoute.key) === 'pop') {\n              closingRouteKeys = [...closingRouteKeys, previousFocusedRoute.key]; // By default, new routes have a push animation, so we add it to `openingRouteKeys` before\n              // But since user configured it to animate the old screen like a pop, we need to add this without animation\n              // So remove it from `openingRouteKeys` which will remove the animation\n\n              openingRouteKeys = openingRouteKeys.filter(key => key !== nextFocusedRoute.key); // Keep the route being removed at the end to animate it out\n\n              routes = [...routes, previousFocusedRoute];\n            } else {\n              replacingRouteKeys = [...replacingRouteKeys, previousFocusedRoute.key];\n              closingRouteKeys = closingRouteKeys.filter(key => key !== previousFocusedRoute.key); // Keep the old route in the state because it's visible under the new route, and removing it will feel abrupt\n              // We need to insert it just before the focused one (the route being pushed)\n              // After the push animation is completed, routes being replaced will be removed completely\n\n              routes = routes.slice();\n              routes.splice(routes.length - 1, 0, previousFocusedRoute);\n            }\n          }\n        }\n      } else if (!routes.some(r => r.key === previousFocusedRoute.key)) {\n        // The previously focused route was removed, we treat this as a pop\n        if (isAnimationEnabled(previousFocusedRoute.key) && !closingRouteKeys.includes(previousFocusedRoute.key)) {\n          closingRouteKeys = [...closingRouteKeys, previousFocusedRoute.key]; // Sometimes a route can be closed before the opening animation finishes\n          // So we also need to remove it from the opening list\n\n          openingRouteKeys = openingRouteKeys.filter(key => key !== previousFocusedRoute.key);\n          replacingRouteKeys = replacingRouteKeys.filter(key => key !== previousFocusedRoute.key); // Keep a copy of route being removed in the state to be able to animate it\n\n          routes = [...routes, previousFocusedRoute];\n        }\n      } else {// Looks like some routes were re-arranged and no focused routes were added/removed\n        // i.e. the currently focused route already existed and the previously focused route still exists\n        // We don't know how to animate this\n      }\n    } else if (replacingRouteKeys.length || closingRouteKeys.length) {\n      // Keep the routes we are closing or replacing if animation is enabled for them\n      routes = routes.slice();\n      routes.splice(routes.length - 1, 0, ...state.routes.filter(_ref10 => {\n        let {\n          key\n        } = _ref10;\n        return isAnimationEnabled(key) ? replacingRouteKeys.includes(key) || closingRouteKeys.includes(key) : false;\n      }));\n    }\n\n    if (!routes.length) {\n      throw new Error('There should always be at least one route in the navigation state.');\n    }\n\n    const descriptors = routes.reduce((acc, route) => {\n      acc[route.key] = props.descriptors[route.key] || state.descriptors[route.key];\n      return acc;\n    }, {});\n    return {\n      routes,\n      previousRoutes: props.state.routes,\n      previousDescriptors: props.descriptors,\n      openingRouteKeys,\n      closingRouteKeys,\n      replacingRouteKeys,\n      descriptors\n    };\n  }\n\n  render() {\n    const {\n      state,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      descriptors: _,\n      ...rest\n    } = this.props;\n    const {\n      routes,\n      descriptors,\n      openingRouteKeys,\n      closingRouteKeys\n    } = this.state;\n    return /*#__PURE__*/React.createElement(GestureHandlerWrapper, {\n      style: styles.container\n    }, /*#__PURE__*/React.createElement(SafeAreaProviderCompat, null, /*#__PURE__*/React.createElement(SafeAreaInsetsContext.Consumer, null, insets => /*#__PURE__*/React.createElement(ModalPresentationContext.Consumer, null, isParentModal => /*#__PURE__*/React.createElement(HeaderShownContext.Consumer, null, isParentHeaderShown => /*#__PURE__*/React.createElement(CardStack, _extends({\n      insets: insets,\n      isParentHeaderShown: isParentHeaderShown,\n      isParentModal: isParentModal,\n      getPreviousRoute: this.getPreviousRoute,\n      routes: routes,\n      openingRouteKeys: openingRouteKeys,\n      closingRouteKeys: closingRouteKeys,\n      onOpenRoute: this.handleOpenRoute,\n      onCloseRoute: this.handleCloseRoute,\n      onTransitionStart: this.handleTransitionStart,\n      onTransitionEnd: this.handleTransitionEnd,\n      renderHeader: this.renderHeader,\n      renderScene: this.renderScene,\n      state: state,\n      descriptors: descriptors,\n      onGestureStart: this.handleGestureStart,\n      onGestureEnd: this.handleGestureEnd,\n      onGestureCancel: this.handleGestureCancel\n    }, rest)))))));\n  }\n\n}\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1\n  }\n});","map":{"version":3,"sources":["StackView.tsx"],"names":["GestureHandlerWrapper","GestureHandlerRootView","isArrayEqual","a","b","it","React","getDerivedStateFromProps","props","state","r","routes","previousRoutes","descriptors","previousDescriptors","acc","route","map","previousFocusedRoute","nextFocusedRoute","isAnimationEnabled","key","descriptor","getAnimationTypeForReplace","openingRouteKeys","closingRouteKeys","replacingRouteKeys","index","navigation","StackActions","source","target","type","data","closing","render","rest","styles","container","insets","isParentModal","isParentHeaderShown","handleGestureCancel","flex"],"mappings":"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","sourcesContent":["import {\n  HeaderShownContext,\n  SafeAreaProviderCompat,\n} from '@react-navigation/elements';\nimport {\n  ParamListBase,\n  Route,\n  StackActions,\n  StackNavigationState,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport {\n  EdgeInsets,\n  SafeAreaInsetsContext,\n} from 'react-native-safe-area-context';\n\nimport type {\n  StackDescriptorMap,\n  StackNavigationConfig,\n  StackNavigationHelpers,\n} from '../../types';\nimport ModalPresentationContext from '../../utils/ModalPresentationContext';\nimport { GestureHandlerRootView } from '../GestureHandler';\nimport HeaderContainer, {\n  Props as HeaderContainerProps,\n} from '../Header/HeaderContainer';\nimport CardStack from './CardStack';\n\ntype Props = StackNavigationConfig & {\n  state: StackNavigationState<ParamListBase>;\n  navigation: StackNavigationHelpers;\n  descriptors: StackDescriptorMap;\n};\n\ntype State = {\n  // Local copy of the routes which are actually rendered\n  routes: Route<string>[];\n  // Previous routes, to compare whether routes have changed or not\n  previousRoutes: Route<string>[];\n  // Previous descriptors, to compare whether descriptors have changed or not\n  previousDescriptors: StackDescriptorMap;\n  // List of routes being opened, we need to animate pushing of these new routes\n  openingRouteKeys: string[];\n  // List of routes being closed, we need to animate popping of these routes\n  closingRouteKeys: string[];\n  // List of routes being replaced, we need to keep a copy until the new route animates in\n  replacingRouteKeys: string[];\n  // Since the local routes can vary from the routes from props, we need to keep the descriptors for old routes\n  // Otherwise we won't be able to access the options for routes that were removed\n  descriptors: StackDescriptorMap;\n};\n\nconst GestureHandlerWrapper = GestureHandlerRootView ?? View;\n\n/**\n * Compare two arrays with primitive values as the content.\n * We need to make sure that both values and order match.\n */\nconst isArrayEqual = (a: any[], b: any[]) =>\n  a.length === b.length && a.every((it, index) => it === b[index]);\n\nexport default class StackView extends React.Component<Props, State> {\n  static getDerivedStateFromProps(\n    props: Readonly<Props>,\n    state: Readonly<State>\n  ) {\n    // If there was no change in routes, we don't need to compute anything\n    if (\n      (props.state.routes === state.previousRoutes ||\n        isArrayEqual(\n          props.state.routes.map((r) => r.key),\n          state.previousRoutes.map((r) => r.key)\n        )) &&\n      state.routes.length\n    ) {\n      let routes = state.routes;\n      let previousRoutes = state.previousRoutes;\n      let descriptors = props.descriptors;\n      let previousDescriptors = state.previousDescriptors;\n\n      if (props.descriptors !== state.previousDescriptors) {\n        descriptors = state.routes.reduce<StackDescriptorMap>((acc, route) => {\n          acc[route.key] =\n            props.descriptors[route.key] || state.descriptors[route.key];\n\n          return acc;\n        }, {});\n\n        previousDescriptors = props.descriptors;\n      }\n\n      if (props.state.routes !== state.previousRoutes) {\n        // if any route objects have changed, we should update them\n        const map = props.state.routes.reduce<Record<string, Route<string>>>(\n          (acc, route) => {\n            acc[route.key] = route;\n            return acc;\n          },\n          {}\n        );\n\n        routes = state.routes.map((route) => map[route.key] || route);\n        previousRoutes = props.state.routes;\n      }\n\n      return {\n        routes,\n        previousRoutes,\n        descriptors,\n        previousDescriptors,\n      };\n    }\n\n    // Here we determine which routes were added or removed to animate them\n    // We keep a copy of the route being removed in local state to be able to animate it\n\n    let routes =\n      props.state.index < props.state.routes.length - 1\n        ? // Remove any extra routes from the state\n          // The last visible route should be the focused route, i.e. at current index\n          props.state.routes.slice(0, props.state.index + 1)\n        : props.state.routes;\n\n    // Now we need to determine which routes were added and removed\n    let {\n      openingRouteKeys,\n      closingRouteKeys,\n      replacingRouteKeys,\n      previousRoutes,\n    } = state;\n\n    const previousFocusedRoute = previousRoutes[previousRoutes.length - 1] as\n      | Route<string>\n      | undefined;\n    const nextFocusedRoute = routes[routes.length - 1];\n\n    const isAnimationEnabled = (key: string) => {\n      const descriptor = props.descriptors[key] || state.descriptors[key];\n\n      return descriptor ? descriptor.options.animationEnabled !== false : true;\n    };\n\n    const getAnimationTypeForReplace = (key: string) => {\n      const descriptor = props.descriptors[key] || state.descriptors[key];\n\n      return descriptor.options.animationTypeForReplace ?? 'push';\n    };\n\n    if (\n      previousFocusedRoute &&\n      previousFocusedRoute.key !== nextFocusedRoute.key\n    ) {\n      // We only need to animate routes if the focused route changed\n      // Animating previous routes won't be visible coz the focused route is on top of everything\n\n      if (!previousRoutes.some((r) => r.key === nextFocusedRoute.key)) {\n        // A new route has come to the focus, we treat this as a push\n        // A replace can also trigger this, the animation should look like push\n\n        if (\n          isAnimationEnabled(nextFocusedRoute.key) &&\n          !openingRouteKeys.includes(nextFocusedRoute.key)\n        ) {\n          // In this case, we need to animate pushing the focused route\n          // We don't care about animating any other added routes because they won't be visible\n          openingRouteKeys = [...openingRouteKeys, nextFocusedRoute.key];\n\n          closingRouteKeys = closingRouteKeys.filter(\n            (key) => key !== nextFocusedRoute.key\n          );\n          replacingRouteKeys = replacingRouteKeys.filter(\n            (key) => key !== nextFocusedRoute.key\n          );\n\n          if (!routes.some((r) => r.key === previousFocusedRoute.key)) {\n            // The previous focused route isn't present in state, we treat this as a replace\n\n            openingRouteKeys = openingRouteKeys.filter(\n              (key) => key !== previousFocusedRoute.key\n            );\n\n            if (getAnimationTypeForReplace(nextFocusedRoute.key) === 'pop') {\n              closingRouteKeys = [\n                ...closingRouteKeys,\n                previousFocusedRoute.key,\n              ];\n\n              // By default, new routes have a push animation, so we add it to `openingRouteKeys` before\n              // But since user configured it to animate the old screen like a pop, we need to add this without animation\n              // So remove it from `openingRouteKeys` which will remove the animation\n              openingRouteKeys = openingRouteKeys.filter(\n                (key) => key !== nextFocusedRoute.key\n              );\n\n              // Keep the route being removed at the end to animate it out\n              routes = [...routes, previousFocusedRoute];\n            } else {\n              replacingRouteKeys = [\n                ...replacingRouteKeys,\n                previousFocusedRoute.key,\n              ];\n\n              closingRouteKeys = closingRouteKeys.filter(\n                (key) => key !== previousFocusedRoute.key\n              );\n\n              // Keep the old route in the state because it's visible under the new route, and removing it will feel abrupt\n              // We need to insert it just before the focused one (the route being pushed)\n              // After the push animation is completed, routes being replaced will be removed completely\n              routes = routes.slice();\n              routes.splice(routes.length - 1, 0, previousFocusedRoute);\n            }\n          }\n        }\n      } else if (!routes.some((r) => r.key === previousFocusedRoute.key)) {\n        // The previously focused route was removed, we treat this as a pop\n\n        if (\n          isAnimationEnabled(previousFocusedRoute.key) &&\n          !closingRouteKeys.includes(previousFocusedRoute.key)\n        ) {\n          closingRouteKeys = [...closingRouteKeys, previousFocusedRoute.key];\n\n          // Sometimes a route can be closed before the opening animation finishes\n          // So we also need to remove it from the opening list\n          openingRouteKeys = openingRouteKeys.filter(\n            (key) => key !== previousFocusedRoute.key\n          );\n          replacingRouteKeys = replacingRouteKeys.filter(\n            (key) => key !== previousFocusedRoute.key\n          );\n\n          // Keep a copy of route being removed in the state to be able to animate it\n          routes = [...routes, previousFocusedRoute];\n        }\n      } else {\n        // Looks like some routes were re-arranged and no focused routes were added/removed\n        // i.e. the currently focused route already existed and the previously focused route still exists\n        // We don't know how to animate this\n      }\n    } else if (replacingRouteKeys.length || closingRouteKeys.length) {\n      // Keep the routes we are closing or replacing if animation is enabled for them\n      routes = routes.slice();\n      routes.splice(\n        routes.length - 1,\n        0,\n        ...state.routes.filter(({ key }) =>\n          isAnimationEnabled(key)\n            ? replacingRouteKeys.includes(key) || closingRouteKeys.includes(key)\n            : false\n        )\n      );\n    }\n\n    if (!routes.length) {\n      throw new Error(\n        'There should always be at least one route in the navigation state.'\n      );\n    }\n\n    const descriptors = routes.reduce<StackDescriptorMap>((acc, route) => {\n      acc[route.key] =\n        props.descriptors[route.key] || state.descriptors[route.key];\n\n      return acc;\n    }, {});\n\n    return {\n      routes,\n      previousRoutes: props.state.routes,\n      previousDescriptors: props.descriptors,\n      openingRouteKeys,\n      closingRouteKeys,\n      replacingRouteKeys,\n      descriptors,\n    };\n  }\n\n  state: State = {\n    routes: [],\n    previousRoutes: [],\n    previousDescriptors: {},\n    openingRouteKeys: [],\n    closingRouteKeys: [],\n    replacingRouteKeys: [],\n    descriptors: {},\n  };\n\n  private getPreviousRoute = ({ route }: { route: Route<string> }) => {\n    const { closingRouteKeys, replacingRouteKeys } = this.state;\n    const routes = this.state.routes.filter(\n      (r) =>\n        r.key === route.key ||\n        (!closingRouteKeys.includes(r.key) &&\n          !replacingRouteKeys.includes(r.key))\n    );\n\n    const index = routes.findIndex((r) => r.key === route.key);\n\n    return routes[index - 1];\n  };\n\n  private renderScene = ({ route }: { route: Route<string> }) => {\n    const descriptor =\n      this.state.descriptors[route.key] || this.props.descriptors[route.key];\n\n    if (!descriptor) {\n      return null;\n    }\n\n    return descriptor.render();\n  };\n\n  private renderHeader = (props: HeaderContainerProps) => {\n    return <HeaderContainer {...props} />;\n  };\n\n  private handleOpenRoute = ({ route }: { route: Route<string> }) => {\n    const { state, navigation } = this.props;\n    const { closingRouteKeys, replacingRouteKeys } = this.state;\n\n    if (\n      closingRouteKeys.some((key) => key === route.key) &&\n      replacingRouteKeys.every((key) => key !== route.key) &&\n      state.routeNames.includes(route.name) &&\n      !state.routes.some((r) => r.key === route.key)\n    ) {\n      // If route isn't present in current state, but was closing, assume that a close animation was cancelled\n      // So we need to add this route back to the state\n      navigation.navigate(route);\n    } else {\n      this.setState((state) => ({\n        routes: state.replacingRouteKeys.length\n          ? state.routes.filter(\n              (r) => !state.replacingRouteKeys.includes(r.key)\n            )\n          : state.routes,\n        openingRouteKeys: state.openingRouteKeys.filter(\n          (key) => key !== route.key\n        ),\n        closingRouteKeys: state.closingRouteKeys.filter(\n          (key) => key !== route.key\n        ),\n        replacingRouteKeys: [],\n      }));\n    }\n  };\n\n  private handleCloseRoute = ({ route }: { route: Route<string> }) => {\n    const { state, navigation } = this.props;\n\n    if (state.routes.some((r) => r.key === route.key)) {\n      // If a route exists in state, trigger a pop\n      // This will happen in when the route was closed from the card component\n      // e.g. When the close animation triggered from a gesture ends\n      navigation.dispatch({\n        ...StackActions.pop(),\n        source: route.key,\n        target: state.key,\n      });\n    } else {\n      // We need to clean up any state tracking the route and pop it immediately\n      this.setState((state) => ({\n        routes: state.routes.filter((r) => r.key !== route.key),\n        openingRouteKeys: state.openingRouteKeys.filter(\n          (key) => key !== route.key\n        ),\n        closingRouteKeys: state.closingRouteKeys.filter(\n          (key) => key !== route.key\n        ),\n      }));\n    }\n  };\n\n  private handleTransitionStart = (\n    { route }: { route: Route<string> },\n    closing: boolean\n  ) =>\n    this.props.navigation.emit({\n      type: 'transitionStart',\n      data: { closing },\n      target: route.key,\n    });\n\n  private handleTransitionEnd = (\n    { route }: { route: Route<string> },\n    closing: boolean\n  ) =>\n    this.props.navigation.emit({\n      type: 'transitionEnd',\n      data: { closing },\n      target: route.key,\n    });\n\n  private handleGestureStart = ({ route }: { route: Route<string> }) => {\n    this.props.navigation.emit({\n      type: 'gestureStart',\n      target: route.key,\n    });\n  };\n\n  private handleGestureEnd = ({ route }: { route: Route<string> }) => {\n    this.props.navigation.emit({\n      type: 'gestureEnd',\n      target: route.key,\n    });\n  };\n\n  private handleGestureCancel = ({ route }: { route: Route<string> }) => {\n    this.props.navigation.emit({\n      type: 'gestureCancel',\n      target: route.key,\n    });\n  };\n\n  render() {\n    const {\n      state,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      descriptors: _,\n      ...rest\n    } = this.props;\n\n    const { routes, descriptors, openingRouteKeys, closingRouteKeys } =\n      this.state;\n\n    return (\n      <GestureHandlerWrapper style={styles.container}>\n        <SafeAreaProviderCompat>\n          <SafeAreaInsetsContext.Consumer>\n            {(insets) => (\n              <ModalPresentationContext.Consumer>\n                {(isParentModal) => (\n                  <HeaderShownContext.Consumer>\n                    {(isParentHeaderShown) => (\n                      <CardStack\n                        insets={insets as EdgeInsets}\n                        isParentHeaderShown={isParentHeaderShown}\n                        isParentModal={isParentModal}\n                        getPreviousRoute={this.getPreviousRoute}\n                        routes={routes}\n                        openingRouteKeys={openingRouteKeys}\n                        closingRouteKeys={closingRouteKeys}\n                        onOpenRoute={this.handleOpenRoute}\n                        onCloseRoute={this.handleCloseRoute}\n                        onTransitionStart={this.handleTransitionStart}\n                        onTransitionEnd={this.handleTransitionEnd}\n                        renderHeader={this.renderHeader}\n                        renderScene={this.renderScene}\n                        state={state}\n                        descriptors={descriptors}\n                        onGestureStart={this.handleGestureStart}\n                        onGestureEnd={this.handleGestureEnd}\n                        onGestureCancel={this.handleGestureCancel}\n                        {...rest}\n                      />\n                    )}\n                  </HeaderShownContext.Consumer>\n                )}\n              </ModalPresentationContext.Consumer>\n            )}\n          </SafeAreaInsetsContext.Consumer>\n        </SafeAreaProviderCompat>\n      </GestureHandlerWrapper>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}