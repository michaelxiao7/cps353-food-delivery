{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { createNavigatorFactory, StackActions, StackRouter, useNavigationBuilder } from '@react-navigation/native';\nimport * as React from 'react';\nimport warnOnce from 'warn-once';\nimport StackView from '../views/Stack/StackView';\n\nfunction StackNavigator(_ref) {\n  let {\n    initialRouteName,\n    children,\n    screenListeners,\n    screenOptions,\n    ...rest\n  } = _ref;\n  // @ts-expect-error: mode is deprecated\n  const mode = rest.mode;\n  warnOnce(mode != null, `Stack Navigator: 'mode=\"${mode}\"' is deprecated. Use 'presentation: \"${mode}\"' in 'screenOptions' instead.\\n\\nSee https://reactnavigation.org/docs/stack-navigator#presentation for more details.`); // @ts-expect-error: headerMode='none' is deprecated\n\n  const headerMode = rest.headerMode;\n  warnOnce(headerMode === 'none', `Stack Navigator: 'headerMode=\"none\"' is deprecated. Use 'headerShown: false' in 'screenOptions' instead.\\n\\nSee https://reactnavigation.org/docs/stack-navigator/#headershown for more details.`);\n  warnOnce(headerMode != null && headerMode !== 'none', `Stack Navigator: 'headerMode' is moved to 'options'. Moved it to 'screenOptions' to keep current behavior.\\n\\nSee https://reactnavigation.org/docs/stack-navigator/#headermode for more details.`); // @ts-expect-error: headerMode='none' is deprecated\n\n  const keyboardHandlingEnabled = rest.keyboardHandlingEnabled;\n  warnOnce(keyboardHandlingEnabled !== undefined, `Stack Navigator: 'keyboardHandlingEnabled' is moved to 'options'. Moved it to 'screenOptions' to keep current behavior.\\n\\nSee https://reactnavigation.org/docs/stack-navigator/#keyboardhandlingenabled for more details.`);\n  const defaultScreenOptions = {\n    presentation: mode,\n    headerShown: headerMode ? headerMode !== 'none' : true,\n    headerMode: headerMode && headerMode !== 'none' ? headerMode : undefined,\n    keyboardHandlingEnabled\n  };\n  const {\n    state,\n    descriptors,\n    navigation,\n    NavigationContent\n  } = useNavigationBuilder(StackRouter, {\n    initialRouteName,\n    children,\n    screenListeners,\n    screenOptions,\n    defaultScreenOptions\n  });\n  React.useEffect(() => {\n    var _navigation$addListen;\n\n    return (_navigation$addListen = navigation.addListener) === null || _navigation$addListen === void 0 ? void 0 : _navigation$addListen.call(navigation, 'tabPress', e => {\n      const isFocused = navigation.isFocused(); // Run the operation in the next frame so we're sure all listeners have been run\n      // This is necessary to know if preventDefault() has been called\n\n      requestAnimationFrame(() => {\n        if (state.index > 0 && isFocused && !e.defaultPrevented) {\n          // When user taps on already focused tab and we're inside the tab,\n          // reset the stack to replicate native behaviour\n          navigation.dispatch({ ...StackActions.popToTop(),\n            target: state.key\n          });\n        }\n      });\n    });\n  }, [navigation, state.index, state.key]);\n  return /*#__PURE__*/React.createElement(NavigationContent, null, /*#__PURE__*/React.createElement(StackView, _extends({}, rest, {\n    state: state,\n    descriptors: descriptors,\n    navigation: navigation\n  })));\n}\n\nexport default createNavigatorFactory(StackNavigator);","map":{"version":3,"sources":["createStackNavigator.tsx"],"names":["rest","mode","warnOnce","headerMode","keyboardHandlingEnabled","defaultScreenOptions","presentation","headerShown","NavigationContent","useNavigationBuilder","React","navigation","e","isFocused","requestAnimationFrame","state","StackActions","target","key","createNavigatorFactory"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,SAAA,sBAAA,EAAA,YAAA,EAAA,WAAA,EAAA,oBAAA,QAAA,0BAAA;AAYA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,OAAA,QAAA,MAAA,WAAA;AAQA,OAAA,SAAA,MAAA,0BAAA;;AAWA,SAAA,cAAA,OAMU;AAAA,MANc;AAAA,IAAA,gBAAA;AAAA,IAAA,QAAA;AAAA,IAAA,eAAA;AAAA,IAAA,aAAA;AAKtB,OAAGA;AALmB,GAMd;AACR;AACA,QAAMC,IAAI,GAAGD,IAAI,CAAjB,IAAA;AAEAE,EAAAA,QAAQ,CACND,IAAI,IADE,IAAA,EAEL,2BAA0BA,IAAK,yCAAwCA,IANlE,uHAIA,CAARC,CAJQ,CASR;;AACA,QAAMC,UAAU,GAAGH,IAAI,CAAvB,UAAA;AAEAE,EAAAA,QAAQ,CACNC,UAAU,KADJ,MAAA,EAARD,iMAAQ,CAARA;AAKAA,EAAAA,QAAQ,CACNC,UAAU,IAAVA,IAAAA,IAAsBA,UAAU,KAD1B,MAAA,EAjBA,kMAiBA,CAARD,CAjBQ,CAsBR;;AACA,QAAME,uBAAuB,GAAGJ,IAAI,CAApC,uBAAA;AAEAE,EAAAA,QAAQ,CACNE,uBAAuB,KADjB,SAAA,EAARF,4NAAQ,CAARA;AAKA,QAAMG,oBAA4C,GAAG;AACnDC,IAAAA,YAAY,EADuC,IAAA;AAEnDC,IAAAA,WAAW,EAAEJ,UAAU,GAAGA,UAAU,KAAb,MAAA,GAF4B,IAAA;AAGnDA,IAAAA,UAAU,EAAEA,UAAU,IAAIA,UAAU,KAAxBA,MAAAA,GAAAA,UAAAA,GAHuC,SAAA;AAInDC,IAAAA;AAJmD,GAArD;AAOA,QAAM;AAAA,IAAA,KAAA;AAAA,IAAA,WAAA;AAAA,IAAA,UAAA;AAAkCI,IAAAA;AAAlC,MACJC,oBAAoB,CAAA,WAAA,EAML;AAAA,IAAA,gBAAA;AAAA,IAAA,QAAA;AAAA,IAAA,eAAA;AAAA,IAAA,aAAA;AAKbJ,IAAAA;AALa,GANK,CADtB;AAeAK,EAAAA,KAAK,CAALA,SAAAA,CACE,MAAA;AAAA,QAAA,qBAAA;;AAAA,WAAA,CAAA,qBAAA,GACEC,UAAU,CADZ,WAAA,MAAA,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GACEA,qBAAAA,CAAAA,IAAAA,CAAAA,UAAAA,EAAU,UAAVA,EAAsCC,CAAD,IAAO;AAC1C,YAAMC,SAAS,GAAGF,UAAU,CADc,SACxBA,EAAlB,CAD0C,CAG1C;AACA;;AACAG,MAAAA,qBAAqB,CAAC,MAAM;AAC1B,YACEC,KAAK,CAALA,KAAAA,GAAAA,CAAAA,IAAAA,SAAAA,IAEA,CAAEH,CAAD,CAHH,gBAAA,EAIE;AACA;AACA;AACAD,UAAAA,UAAU,CAAVA,QAAAA,CAAoB,EAClB,GAAGK,YAAY,CADG,QACfA,EADe;AAElBC,YAAAA,MAAM,EAAEF,KAAK,CAACG;AAFI,WAApBP;AAID;AAZHG,OAAqB,CAArBA;AANJ,KACEH,CADF;AADFD,GAAAA,EAsBE,CAAA,UAAA,EAAaK,KAAK,CAAlB,KAAA,EAA0BA,KAAK,CAtBjCL,GAsBE,CAtBFA;AAyBA,SAAA,aACE,KAAA,CAAA,aAAA,CAAA,iBAAA,EAAA,IAAA,EAAA,aACE,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA,QAAA,CAAA,EAAA,EAAA,IAAA,EAAA;AAEE,IAAA,KAAK,EAFP,KAAA;AAGE,IAAA,WAAW,EAHb,WAAA;AAIE,IAAA,UAAU,EAAEC;AAJd,GAAA,CAAA,CADF,CADF;AAUD;;AAED,eAAeQ,sBAAsB,CAArC,cAAqC,CAArC","sourcesContent":["import {\n  createNavigatorFactory,\n  DefaultNavigatorOptions,\n  EventArg,\n  ParamListBase,\n  StackActionHelpers,\n  StackActions,\n  StackNavigationState,\n  StackRouter,\n  StackRouterOptions,\n  useNavigationBuilder,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport warnOnce from 'warn-once';\n\nimport type {\n  StackHeaderMode,\n  StackNavigationConfig,\n  StackNavigationEventMap,\n  StackNavigationOptions,\n} from '../types';\nimport StackView from '../views/Stack/StackView';\n\ntype Props = DefaultNavigatorOptions<\n  ParamListBase,\n  StackNavigationState<ParamListBase>,\n  StackNavigationOptions,\n  StackNavigationEventMap\n> &\n  StackRouterOptions &\n  StackNavigationConfig;\n\nfunction StackNavigator({\n  initialRouteName,\n  children,\n  screenListeners,\n  screenOptions,\n  ...rest\n}: Props) {\n  // @ts-expect-error: mode is deprecated\n  const mode = rest.mode as 'card' | 'modal' | undefined;\n\n  warnOnce(\n    mode != null,\n    `Stack Navigator: 'mode=\"${mode}\"' is deprecated. Use 'presentation: \"${mode}\"' in 'screenOptions' instead.\\n\\nSee https://reactnavigation.org/docs/stack-navigator#presentation for more details.`\n  );\n\n  // @ts-expect-error: headerMode='none' is deprecated\n  const headerMode = rest.headerMode as StackHeaderMode | 'none' | undefined;\n\n  warnOnce(\n    headerMode === 'none',\n    `Stack Navigator: 'headerMode=\"none\"' is deprecated. Use 'headerShown: false' in 'screenOptions' instead.\\n\\nSee https://reactnavigation.org/docs/stack-navigator/#headershown for more details.`\n  );\n\n  warnOnce(\n    headerMode != null && headerMode !== 'none',\n    `Stack Navigator: 'headerMode' is moved to 'options'. Moved it to 'screenOptions' to keep current behavior.\\n\\nSee https://reactnavigation.org/docs/stack-navigator/#headermode for more details.`\n  );\n\n  // @ts-expect-error: headerMode='none' is deprecated\n  const keyboardHandlingEnabled = rest.keyboardHandlingEnabled;\n\n  warnOnce(\n    keyboardHandlingEnabled !== undefined,\n    `Stack Navigator: 'keyboardHandlingEnabled' is moved to 'options'. Moved it to 'screenOptions' to keep current behavior.\\n\\nSee https://reactnavigation.org/docs/stack-navigator/#keyboardhandlingenabled for more details.`\n  );\n\n  const defaultScreenOptions: StackNavigationOptions = {\n    presentation: mode,\n    headerShown: headerMode ? headerMode !== 'none' : true,\n    headerMode: headerMode && headerMode !== 'none' ? headerMode : undefined,\n    keyboardHandlingEnabled,\n  };\n\n  const { state, descriptors, navigation, NavigationContent } =\n    useNavigationBuilder<\n      StackNavigationState<ParamListBase>,\n      StackRouterOptions,\n      StackActionHelpers<ParamListBase>,\n      StackNavigationOptions,\n      StackNavigationEventMap\n    >(StackRouter, {\n      initialRouteName,\n      children,\n      screenListeners,\n      screenOptions,\n      defaultScreenOptions,\n    });\n\n  React.useEffect(\n    () =>\n      navigation.addListener?.('tabPress', (e) => {\n        const isFocused = navigation.isFocused();\n\n        // Run the operation in the next frame so we're sure all listeners have been run\n        // This is necessary to know if preventDefault() has been called\n        requestAnimationFrame(() => {\n          if (\n            state.index > 0 &&\n            isFocused &&\n            !(e as EventArg<'tabPress', true>).defaultPrevented\n          ) {\n            // When user taps on already focused tab and we're inside the tab,\n            // reset the stack to replicate native behaviour\n            navigation.dispatch({\n              ...StackActions.popToTop(),\n              target: state.key,\n            });\n          }\n        });\n      }),\n    [navigation, state.index, state.key]\n  );\n\n  return (\n    <NavigationContent>\n      <StackView\n        {...rest}\n        state={state}\n        descriptors={descriptors}\n        navigation={navigation}\n      />\n    </NavigationContent>\n  );\n}\n\nexport default createNavigatorFactory<\n  StackNavigationState<ParamListBase>,\n  StackNavigationOptions,\n  StackNavigationEventMap,\n  typeof StackNavigator\n>(StackNavigator);\n"]},"metadata":{},"sourceType":"module"}