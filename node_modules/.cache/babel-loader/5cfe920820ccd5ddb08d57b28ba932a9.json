{"ast":null,"code":"import { getHeaderTitle, HeaderBackContext } from '@react-navigation/elements';\nimport { NavigationContext, NavigationRouteContext } from '@react-navigation/native';\nimport * as React from 'react';\nimport { Animated, StyleSheet, View } from 'react-native';\nimport { forNoAnimation, forSlideLeft, forSlideRight, forSlideUp } from '../../TransitionConfigs/HeaderStyleInterpolators';\nimport Header from './Header';\nexport default function HeaderContainer(_ref) {\n  let {\n    mode,\n    scenes,\n    layout,\n    getPreviousScene,\n    getFocusedRoute,\n    onContentHeightChange,\n    style\n  } = _ref;\n  const focusedRoute = getFocusedRoute();\n  const parentHeaderBack = React.useContext(HeaderBackContext);\n  return /*#__PURE__*/React.createElement(Animated.View, {\n    pointerEvents: \"box-none\",\n    style: style\n  }, scenes.slice(-3).map((scene, i, self) => {\n    var _self, _self2;\n\n    if (mode === 'screen' && i !== self.length - 1 || !scene) {\n      return null;\n    }\n\n    const {\n      header,\n      headerMode,\n      headerShown = true,\n      headerTransparent,\n      headerStyleInterpolator\n    } = scene.descriptor.options;\n\n    if (headerMode !== mode || !headerShown) {\n      return null;\n    }\n\n    const isFocused = focusedRoute.key === scene.descriptor.route.key;\n    const previousScene = getPreviousScene({\n      route: scene.descriptor.route\n    });\n    let headerBack = parentHeaderBack;\n\n    if (previousScene) {\n      const {\n        options,\n        route\n      } = previousScene.descriptor;\n      headerBack = previousScene ? {\n        title: getHeaderTitle(options, route.name)\n      } : parentHeaderBack;\n    } // If the screen is next to a headerless screen, we need to make the header appear static\n    // This makes the header look like it's moving with the screen\n\n\n    const previousDescriptor = (_self = self[i - 1]) === null || _self === void 0 ? void 0 : _self.descriptor;\n    const nextDescriptor = (_self2 = self[i + 1]) === null || _self2 === void 0 ? void 0 : _self2.descriptor;\n    const {\n      headerShown: previousHeaderShown = true,\n      headerMode: previousHeaderMode\n    } = (previousDescriptor === null || previousDescriptor === void 0 ? void 0 : previousDescriptor.options) || {}; // If any of the next screens don't have a header or header is part of the screen\n    // Then we need to move this header offscreen so that it doesn't cover it\n\n    const nextHeaderlessScene = self.slice(i + 1).find(scene => {\n      const {\n        headerShown: currentHeaderShown = true,\n        headerMode: currentHeaderMode\n      } = (scene === null || scene === void 0 ? void 0 : scene.descriptor.options) || {};\n      return currentHeaderShown === false || currentHeaderMode === 'screen';\n    });\n    const {\n      gestureDirection: nextHeaderlessGestureDirection\n    } = (nextHeaderlessScene === null || nextHeaderlessScene === void 0 ? void 0 : nextHeaderlessScene.descriptor.options) || {};\n    const isHeaderStatic = (previousHeaderShown === false || previousHeaderMode === 'screen') && // We still need to animate when coming back from next scene\n    // A hacky way to check this is if the next scene exists\n    !nextDescriptor || nextHeaderlessScene;\n    const props = {\n      layout,\n      back: headerBack,\n      progress: scene.progress,\n      options: scene.descriptor.options,\n      route: scene.descriptor.route,\n      navigation: scene.descriptor.navigation,\n      styleInterpolator: mode === 'float' ? isHeaderStatic ? nextHeaderlessGestureDirection === 'vertical' || nextHeaderlessGestureDirection === 'vertical-inverted' ? forSlideUp : nextHeaderlessGestureDirection === 'horizontal-inverted' ? forSlideRight : forSlideLeft : headerStyleInterpolator : forNoAnimation\n    };\n    return /*#__PURE__*/React.createElement(NavigationContext.Provider, {\n      key: scene.descriptor.route.key,\n      value: scene.descriptor.navigation\n    }, /*#__PURE__*/React.createElement(NavigationRouteContext.Provider, {\n      value: scene.descriptor.route\n    }, /*#__PURE__*/React.createElement(View, {\n      onLayout: onContentHeightChange ? e => {\n        const {\n          height\n        } = e.nativeEvent.layout;\n        onContentHeightChange({\n          route: scene.descriptor.route,\n          height\n        });\n      } : undefined,\n      pointerEvents: isFocused ? 'box-none' : 'none',\n      accessibilityElementsHidden: !isFocused,\n      importantForAccessibility: isFocused ? 'auto' : 'no-hide-descendants',\n      style: // Avoid positioning the focused header absolutely\n      // Otherwise accessibility tools don't seem to be able to find it\n      mode === 'float' && !isFocused || headerTransparent ? styles.header : null\n    }, header !== undefined ? header(props) : /*#__PURE__*/React.createElement(Header, props))));\n  }));\n}\nconst styles = StyleSheet.create({\n  header: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0\n  }\n});","map":{"version":3,"sources":["HeaderContainer.tsx"],"names":["style","focusedRoute","getFocusedRoute","parentHeaderBack","React","mode","i","self","headerShown","headerStyleInterpolator","scene","headerMode","isFocused","previousScene","getPreviousScene","route","headerBack","title","getHeaderTitle","previousDescriptor","nextDescriptor","previousHeaderShown","previousHeaderMode","nextHeaderlessScene","currentHeaderShown","currentHeaderMode","gestureDirection","nextHeaderlessGestureDirection","isHeaderStatic","props","back","progress","options","navigation","styleInterpolator","forNoAnimation","onContentHeightChange","e","height","styles","header","position","top","left","right"],"mappings":"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","sourcesContent":["import { getHeaderTitle, HeaderBackContext } from '@react-navigation/elements';\nimport {\n  NavigationContext,\n  NavigationRouteContext,\n  ParamListBase,\n  Route,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport { Animated, StyleProp, StyleSheet, View, ViewStyle } from 'react-native';\n\nimport {\n  forNoAnimation,\n  forSlideLeft,\n  forSlideRight,\n  forSlideUp,\n} from '../../TransitionConfigs/HeaderStyleInterpolators';\nimport type {\n  Layout,\n  Scene,\n  StackHeaderMode,\n  StackHeaderProps,\n  StackNavigationProp,\n} from '../../types';\nimport Header from './Header';\n\nexport type Props = {\n  mode: StackHeaderMode;\n  layout: Layout;\n  scenes: (Scene | undefined)[];\n  getPreviousScene: (props: { route: Route<string> }) => Scene | undefined;\n  getFocusedRoute: () => Route<string>;\n  onContentHeightChange?: (props: {\n    route: Route<string>;\n    height: number;\n  }) => void;\n  style?: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\n};\n\nexport default function HeaderContainer({\n  mode,\n  scenes,\n  layout,\n  getPreviousScene,\n  getFocusedRoute,\n  onContentHeightChange,\n  style,\n}: Props) {\n  const focusedRoute = getFocusedRoute();\n  const parentHeaderBack = React.useContext(HeaderBackContext);\n\n  return (\n    <Animated.View pointerEvents=\"box-none\" style={style}>\n      {scenes.slice(-3).map((scene, i, self) => {\n        if ((mode === 'screen' && i !== self.length - 1) || !scene) {\n          return null;\n        }\n\n        const {\n          header,\n          headerMode,\n          headerShown = true,\n          headerTransparent,\n          headerStyleInterpolator,\n        } = scene.descriptor.options;\n\n        if (headerMode !== mode || !headerShown) {\n          return null;\n        }\n\n        const isFocused = focusedRoute.key === scene.descriptor.route.key;\n        const previousScene = getPreviousScene({\n          route: scene.descriptor.route,\n        });\n\n        let headerBack = parentHeaderBack;\n\n        if (previousScene) {\n          const { options, route } = previousScene.descriptor;\n\n          headerBack = previousScene\n            ? { title: getHeaderTitle(options, route.name) }\n            : parentHeaderBack;\n        }\n\n        // If the screen is next to a headerless screen, we need to make the header appear static\n        // This makes the header look like it's moving with the screen\n        const previousDescriptor = self[i - 1]?.descriptor;\n        const nextDescriptor = self[i + 1]?.descriptor;\n\n        const {\n          headerShown: previousHeaderShown = true,\n          headerMode: previousHeaderMode,\n        } = previousDescriptor?.options || {};\n\n        // If any of the next screens don't have a header or header is part of the screen\n        // Then we need to move this header offscreen so that it doesn't cover it\n        const nextHeaderlessScene = self.slice(i + 1).find((scene) => {\n          const {\n            headerShown: currentHeaderShown = true,\n            headerMode: currentHeaderMode,\n          } = scene?.descriptor.options || {};\n\n          return currentHeaderShown === false || currentHeaderMode === 'screen';\n        });\n\n        const { gestureDirection: nextHeaderlessGestureDirection } =\n          nextHeaderlessScene?.descriptor.options || {};\n\n        const isHeaderStatic =\n          ((previousHeaderShown === false || previousHeaderMode === 'screen') &&\n            // We still need to animate when coming back from next scene\n            // A hacky way to check this is if the next scene exists\n            !nextDescriptor) ||\n          nextHeaderlessScene;\n\n        const props: StackHeaderProps = {\n          layout,\n          back: headerBack,\n          progress: scene.progress,\n          options: scene.descriptor.options,\n          route: scene.descriptor.route,\n          navigation: scene.descriptor\n            .navigation as StackNavigationProp<ParamListBase>,\n          styleInterpolator:\n            mode === 'float'\n              ? isHeaderStatic\n                ? nextHeaderlessGestureDirection === 'vertical' ||\n                  nextHeaderlessGestureDirection === 'vertical-inverted'\n                  ? forSlideUp\n                  : nextHeaderlessGestureDirection === 'horizontal-inverted'\n                  ? forSlideRight\n                  : forSlideLeft\n                : headerStyleInterpolator\n              : forNoAnimation,\n        };\n\n        return (\n          <NavigationContext.Provider\n            key={scene.descriptor.route.key}\n            value={scene.descriptor.navigation}\n          >\n            <NavigationRouteContext.Provider value={scene.descriptor.route}>\n              <View\n                onLayout={\n                  onContentHeightChange\n                    ? (e) => {\n                        const { height } = e.nativeEvent.layout;\n\n                        onContentHeightChange({\n                          route: scene.descriptor.route,\n                          height,\n                        });\n                      }\n                    : undefined\n                }\n                pointerEvents={isFocused ? 'box-none' : 'none'}\n                accessibilityElementsHidden={!isFocused}\n                importantForAccessibility={\n                  isFocused ? 'auto' : 'no-hide-descendants'\n                }\n                style={\n                  // Avoid positioning the focused header absolutely\n                  // Otherwise accessibility tools don't seem to be able to find it\n                  (mode === 'float' && !isFocused) || headerTransparent\n                    ? styles.header\n                    : null\n                }\n              >\n                {header !== undefined ? header(props) : <Header {...props} />}\n              </View>\n            </NavigationRouteContext.Provider>\n          </NavigationContext.Provider>\n        );\n      })}\n    </Animated.View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  header: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}