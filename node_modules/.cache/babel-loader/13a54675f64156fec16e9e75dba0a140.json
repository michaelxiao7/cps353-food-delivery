{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React from 'react';\nimport { Animated, View, Image } from 'react-native';\nexport * from './types';\nexport { default as useTransitionProgress } from './useTransitionProgress';\nexport { isSearchBarAvailableForCurrentPlatform, executeNativeBackPress } from './utils';\nlet ENABLE_SCREENS = true;\nexport function enableScreens() {\n  let shouldEnableScreens = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n  ENABLE_SCREENS = shouldEnableScreens;\n}\nexport function screensEnabled() {\n  return ENABLE_SCREENS;\n} // @ts-ignore function stub, freezing logic is located in index.native.tsx\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\nexport function enableFreeze() {// noop\n\n  let shouldEnableReactFreeze = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n}\nexport class NativeScreen extends React.Component {\n  render() {\n    let {\n      active,\n      activityState,\n      style,\n      enabled = ENABLE_SCREENS,\n      ...rest\n    } = this.props;\n\n    if (enabled) {\n      if (active !== undefined && activityState === undefined) {\n        activityState = active !== 0 ? 2 : 0; // change taken from index.native.tsx\n      }\n\n      return /*#__PURE__*/React.createElement(View // @ts-expect-error: hidden exists on web, but not in React Native\n      , _extends({\n        hidden: activityState === 0,\n        style: [style, {\n          display: activityState !== 0 ? 'flex' : 'none'\n        }]\n      }, rest));\n    }\n\n    return /*#__PURE__*/React.createElement(View, rest);\n  }\n\n}\nexport const Screen = Animated.createAnimatedComponent(NativeScreen);\nexport const ScreenContext = /*#__PURE__*/React.createContext(Screen);\nexport const ScreenContainer = View;\nexport const NativeScreenContainer = View;\nexport const NativeScreenNavigationContainer = View;\nexport const ScreenStack = View;\nexport const FullWindowOverlay = View;\nexport const ScreenStackHeaderBackButtonImage = props => /*#__PURE__*/React.createElement(View, null, /*#__PURE__*/React.createElement(Image, _extends({\n  resizeMode: \"center\",\n  fadeDuration: 0\n}, props)));\nexport const ScreenStackHeaderRightView = props => /*#__PURE__*/React.createElement(View, props);\nexport const ScreenStackHeaderLeftView = props => /*#__PURE__*/React.createElement(View, props);\nexport const ScreenStackHeaderCenterView = props => /*#__PURE__*/React.createElement(View, props);\nexport const ScreenStackHeaderSearchBarView = props => /*#__PURE__*/React.createElement(View, props);\nexport const ScreenStackHeaderConfig = View; // @ts-expect-error: search bar props have no common props with View\n\nexport const SearchBar = View;\nexport const ScreenStackHeaderSubview = View;\nexport const shouldUseActivityState = true;","map":{"version":3,"sources":["index.tsx"],"names":["default","ENABLE_SCREENS","shouldEnableScreens","shouldEnableReactFreeze","React","render","enabled","rest","active","activityState","display","Screen","Animated","ScreenContext","ScreenContainer","NativeScreenContainer","NativeScreenNavigationContainer","ScreenStack","FullWindowOverlay","ScreenStackHeaderBackButtonImage","props","ScreenStackHeaderRightView","ScreenStackHeaderLeftView","ScreenStackHeaderCenterView","ScreenStackHeaderSearchBarView","ScreenStackHeaderConfig","SearchBar","ScreenStackHeaderSubview","shouldUseActivityState"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Animated, View, ViewProps, ImageProps, Image } from 'react-native';\nimport {\n  ScreenProps,\n  ScreenContainerProps,\n  ScreenStackProps,\n  ScreenStackHeaderConfigProps,\n  HeaderSubviewTypes,\n  SearchBarProps,\n} from './types';\n\nexport * from './types';\nexport { default as useTransitionProgress } from './useTransitionProgress';\nexport {\n  isSearchBarAvailableForCurrentPlatform,\n  executeNativeBackPress,\n} from './utils';\n\nlet ENABLE_SCREENS = true;\n\nexport function enableScreens(shouldEnableScreens = true): void {\n  ENABLE_SCREENS = shouldEnableScreens;\n}\n\nexport function screensEnabled(): boolean {\n  return ENABLE_SCREENS;\n}\n\n// @ts-ignore function stub, freezing logic is located in index.native.tsx\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport function enableFreeze(shouldEnableReactFreeze = true): void {\n  // noop\n}\n\nexport class NativeScreen extends React.Component<ScreenProps> {\n  render(): JSX.Element {\n    let {\n      active,\n      activityState,\n      style,\n      enabled = ENABLE_SCREENS,\n      ...rest\n    } = this.props;\n\n    if (enabled) {\n      if (active !== undefined && activityState === undefined) {\n        activityState = active !== 0 ? 2 : 0; // change taken from index.native.tsx\n      }\n      return (\n        <View\n          // @ts-expect-error: hidden exists on web, but not in React Native\n          hidden={activityState === 0}\n          style={[style, { display: activityState !== 0 ? 'flex' : 'none' }]}\n          {...rest}\n        />\n      );\n    }\n\n    return <View {...rest} />;\n  }\n}\n\nexport const Screen = Animated.createAnimatedComponent(NativeScreen);\n\nexport const ScreenContext = React.createContext(Screen);\n\nexport const ScreenContainer: React.ComponentType<ScreenContainerProps> = View;\n\nexport const NativeScreenContainer: React.ComponentType<ScreenContainerProps> = View;\n\nexport const NativeScreenNavigationContainer: React.ComponentType<ScreenContainerProps> = View;\n\nexport const ScreenStack: React.ComponentType<ScreenStackProps> = View;\n\nexport const FullWindowOverlay = View;\n\nexport const ScreenStackHeaderBackButtonImage = (\n  props: ImageProps\n): JSX.Element => (\n  <View>\n    <Image resizeMode=\"center\" fadeDuration={0} {...props} />\n  </View>\n);\n\nexport const ScreenStackHeaderRightView = (\n  props: React.PropsWithChildren<ViewProps>\n): JSX.Element => <View {...props} />;\n\nexport const ScreenStackHeaderLeftView = (\n  props: React.PropsWithChildren<ViewProps>\n): JSX.Element => <View {...props} />;\n\nexport const ScreenStackHeaderCenterView = (\n  props: React.PropsWithChildren<ViewProps>\n): JSX.Element => <View {...props} />;\n\nexport const ScreenStackHeaderSearchBarView = (\n  props: React.PropsWithChildren<SearchBarProps>\n): JSX.Element => <View {...props} />;\n\nexport const ScreenStackHeaderConfig: React.ComponentType<ScreenStackHeaderConfigProps> = View;\n\n// @ts-expect-error: search bar props have no common props with View\nexport const SearchBar: React.ComponentType<SearchBarProps> = View;\n\nexport const ScreenStackHeaderSubview: React.ComponentType<React.PropsWithChildren<\n  ViewProps & { type?: HeaderSubviewTypes }\n>> = View;\n\nexport const shouldUseActivityState = true;\n"]},"metadata":{},"sourceType":"module"}